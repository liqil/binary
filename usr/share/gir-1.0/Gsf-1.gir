<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <namespace name="Gsf"
             version="1"
             shared-library="libgsf-1.so.114"
             c:identifier-prefixes="Gsf"
             c:symbol-prefixes="gsf">
    <alias name="gsf_off_t" c:type="gsf_off_t">
      <doc xml:whitespace="preserve">Data type to represent offsets (positions) within a data stream.

FIXME:
gsf_off_t is really supposed to be the widest type off_t can be configured
to on the platform</doc>
      <type name="gint64" c:type="gint64"/>
    </alias>
    <constant name="BAT_INDEX_SIZE" value="4" c:type="BAT_INDEX_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BAT_MAGIC_BAT" value="4294967293" c:type="BAT_MAGIC_BAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BAT_MAGIC_END_OF_CHAIN"
              value="4294967294"
              c:type="BAT_MAGIC_END_OF_CHAIN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BAT_MAGIC_METABAT"
              value="4294967292"
              c:type="BAT_MAGIC_METABAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BAT_MAGIC_UNUSED"
              value="4294967295"
              c:type="BAT_MAGIC_UNUSED">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Blob"
           c:symbol-prefix="blob"
           c:type="GsfBlob"
           parent="GObject.Object"
           glib:type-name="GsfBlob"
           glib:get-type="gsf_blob_get_type"
           glib:type-struct="BlobClass">
      <constructor name="new" c:identifier="gsf_blob_new" throws="1">
        <doc xml:whitespace="preserve">Creates a new #GsfBlob object to hold the specified data.  The blob can then
be used as a facility for reference-counting for the data.  The data is
copied internally, so the blob does not hold references to external chunks
of memory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GsfBlob, or %NULL if the data could not be copied.  Error domain: #GSF_ERROR  Possible errors: #GSF_ERROR_OUT_OF_MEMORY if the @data_to_copy could not be copied.</doc>
          <type name="Blob" c:type="GsfBlob*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">Size of the data in bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="data_to_copy" transfer-ownership="none">
            <doc xml:whitespace="preserve">Data which will be copied into the blob, or %NULL if @size is zero.</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_size" c:identifier="gsf_blob_get_size">
        <doc xml:whitespace="preserve">Queries the size in bytes of the data stored in the blob.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Size in bytes, or 0 if the data is %NULL.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
      </method>
      <method name="peek_data" c:identifier="gsf_blob_peek_data">
        <doc xml:whitespace="preserve">Queries a pointer to the data stored in the blob.  This does not copy the data
for you; it returns a pointer to the actual buffer which the blob uses internally,
so you should not free this buffer on your own.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to the data stored in the blob, or %NULL if the size of the data is zero.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
      </method>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BlobPrivate" c:type="GsfBlobPrivate*"/>
      </field>
    </class>
    <record name="BlobClass"
            c:type="GsfBlobClass"
            disguised="1"
            glib:is-gtype-struct-for="Blob">
    </record>
    <record name="BlobPrivate" c:type="GsfBlobPrivate" disguised="1">
    </record>
    <class name="ClipData"
           c:symbol-prefix="clip_data"
           c:type="GsfClipData"
           parent="GObject.Object"
           glib:type-name="GsfClipData"
           glib:get-type="gsf_clip_data_get_type"
           glib:type-struct="ClipDataClass">
      <constructor name="new" c:identifier="gsf_clip_data_new">
        <doc xml:whitespace="preserve">Creates a new #GsfClipData object.  This function acquires a reference to the
@data_blob, so you should unref the blob on your own if you no longer need it
directly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A newly-created #GsfClipData.</doc>
          <type name="ClipData" c:type="GsfClipData*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">Format for the data inside the @data_blob</doc>
            <type name="ClipFormat" c:type="GsfClipFormat"/>
          </parameter>
          <parameter name="data_blob" transfer-ownership="none">
            <doc xml:whitespace="preserve">Object which holds the binary contents for the #GsfClipData</doc>
            <type name="Blob" c:type="GsfBlob*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_data_blob" c:identifier="gsf_clip_data_get_data_blob">
        <doc xml:whitespace="preserve">Queries the data blob that actually stores a #GsfClipData's binary data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new reference to the #GsfBlob that stores this @clip_data's binary data.  You must use g_object_unref() to dispose of that data blob when you are done with it.</doc>
          <type name="Blob" c:type="GsfBlob*"/>
        </return-value>
      </method>
      <method name="get_format" c:identifier="gsf_clip_data_get_format">
        <doc xml:whitespace="preserve">Queries the clipboard data format of a #GsfClipData.  The format refers to the data
blob inside the @clip_data; use gsf_clip_data_get_data_blob() to get that data blob.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The format in which the #GsfClipData's data blob is stored.</doc>
          <type name="ClipFormat" c:type="GsfClipFormat"/>
        </return-value>
      </method>
      <method name="get_windows_clipboard_format"
              c:identifier="gsf_clip_data_get_windows_clipboard_format"
              throws="1">
        <doc xml:whitespace="preserve">Queries the Windows clipboard data format for a #GsfClipData.  The @clip_data must
have been created with #GSF_CLIP_FORMAT_WINDOWS_CLIPBOARD.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GsfClipFormatWindows value.  Possible errors: #GSF_ERROR_INVALID_DATA if the data blob in the @clip_data is smaller than it should be; in this case GSF_CLIP_FORMAT_WINDOWS_ERROR will be returned.</doc>
          <type name="ClipFormatWindows" c:type="GsfClipFormatWindows"/>
        </return-value>
      </method>
      <method name="peek_real_data"
              c:identifier="gsf_clip_data_peek_real_data"
              throws="1">
        <doc xml:whitespace="preserve">Queries a pointer directly to the clipboard data of a #GsfClipData.  The
resulting pointer is not necessarily the same data pointer that was passed to
gsf_blob_new() prior to creating the @clip_data.  For example, if the data is
in #GSF_CLIP_FORMAT_WINDOWS_CLIPBOARD format, then it will have extra header
bytes in front of the actual metafile data.  This function will skip over
those header bytes if necessary and return a pointer to the "real" data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to the real clipboard data.  The size in bytes of this buffer is returned in the @ret_size argument.</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </return-value>
        <parameters>
          <parameter name="ret_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">Location to return the size of the returned data buffer.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <field name="object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClipDataPrivate" c:type="GsfClipDataPrivate*"/>
      </field>
    </class>
    <record name="ClipDataClass"
            c:type="GsfClipDataClass"
            disguised="1"
            glib:is-gtype-struct-for="ClipData">
    </record>
    <record name="ClipDataPrivate" c:type="GsfClipDataPrivate" disguised="1">
    </record>
    <enumeration name="ClipFormat" c:type="GsfClipFormat">
      <member name="windows_clipboard"
              value="-1"
              c:identifier="GSF_CLIP_FORMAT_WINDOWS_CLIPBOARD"/>
      <member name="macintosh_clipboard"
              value="-2"
              c:identifier="GSF_CLIP_FORMAT_MACINTOSH_CLIPBOARD"/>
      <member name="guid" value="-3" c:identifier="GSF_CLIP_FORMAT_GUID"/>
      <member name="no_data" value="0" c:identifier="GSF_CLIP_FORMAT_NO_DATA"/>
      <member name="clipboard_format_name"
              value="1"
              c:identifier="GSF_CLIP_FORMAT_CLIPBOARD_FORMAT_NAME"/>
      <member name="unknown" value="2" c:identifier="GSF_CLIP_FORMAT_UNKNOWN"/>
    </enumeration>
    <enumeration name="ClipFormatWindows" c:type="GsfClipFormatWindows">
      <member name="error"
              value="-1"
              c:identifier="GSF_CLIP_FORMAT_WINDOWS_ERROR"/>
      <member name="unknown"
              value="-2"
              c:identifier="GSF_CLIP_FORMAT_WINDOWS_UNKNOWN"/>
      <member name="metafile"
              value="3"
              c:identifier="GSF_CLIP_FORMAT_WINDOWS_METAFILE"/>
      <member name="dib" value="8" c:identifier="GSF_CLIP_FORMAT_WINDOWS_DIB"/>
      <member name="enhanced_metafile"
              value="14"
              c:identifier="GSF_CLIP_FORMAT_WINDOWS_ENHANCED_METAFILE"/>
    </enumeration>
    <constant name="DIRENT_CHILD" value="76" c:type="DIRENT_CHILD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_CLSID" value="80" c:type="DIRENT_CLSID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_COLOUR" value="67" c:type="DIRENT_COLOUR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_CREATE_TIME"
              value="100"
              c:type="DIRENT_CREATE_TIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_DETAILS_SIZE"
              value="64"
              c:type="DIRENT_DETAILS_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_FILE_SIZE" value="120" c:type="DIRENT_FILE_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_FIRSTBLOCK" value="116" c:type="DIRENT_FIRSTBLOCK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_MAGIC_END"
              value="4294967295"
              c:type="DIRENT_MAGIC_END">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_MAX_NAME_SIZE"
              value="64"
              c:type="DIRENT_MAX_NAME_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_MODIFY_TIME"
              value="108"
              c:type="DIRENT_MODIFY_TIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_NAME_LEN" value="64" c:type="DIRENT_NAME_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_NEXT" value="72" c:type="DIRENT_NEXT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_PREV" value="68" c:type="DIRENT_PREV">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_SIZE" value="0" c:type="DIRENT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE" value="66" c:type="DIRENT_TYPE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_DIR" value="1" c:type="DIRENT_TYPE_DIR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_FILE" value="2" c:type="DIRENT_TYPE_FILE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_INVALID"
              value="0"
              c:type="DIRENT_TYPE_INVALID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_LOCKBYTES"
              value="3"
              c:type="DIRENT_TYPE_LOCKBYTES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_PROPERTY"
              value="4"
              c:type="DIRENT_TYPE_PROPERTY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_TYPE_ROOTDIR"
              value="5"
              c:type="DIRENT_TYPE_ROOTDIR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="DIRENT_USERFLAGS" value="96" c:type="DIRENT_USERFLAGS">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="DocMetaData"
           c:symbol-prefix="doc_meta_data"
           c:type="GsfDocMetaData"
           parent="GObject.Object"
           glib:type-name="GsfDocMetaData"
           glib:get-type="gsf_doc_meta_data_get_type">
      <doc xml:whitespace="preserve">Class representing information about a document, such as creator and time of
last modification.</doc>
      <constructor name="new" c:identifier="gsf_doc_meta_data_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new metadata property collection</doc>
          <type name="DocMetaData" c:type="GsfDocMetaData*"/>
        </return-value>
      </constructor>
      <method name="foreach" c:identifier="gsf_doc_meta_data_foreach">
        <doc xml:whitespace="preserve">Iterate through each (key, value) pair in this collection</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">the function called once for each element in the collection</doc>
            <type name="GLib.HFunc" c:type="GHFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">any supplied user data or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="gsf_doc_meta_data_insert">
        <doc xml:whitespace="preserve">Take ownership of @name and @value and insert a property into @meta.
If a property exists with @name, it is replaced (The link is lost)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the id.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="gsf_doc_meta_data_lookup">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the property with name @id in @meta.  The caller can modify the property value and link but not the name.</doc>
          <type name="DocProp" c:type="GsfDocProp*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="odf_subtree"
              c:identifier="gsf_doc_meta_data_odf_subtree"
              version="1.14.24">
        <doc xml:whitespace="preserve">Extend @xin so that it can parse a subtree in OpenDoc metadata format</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfXMLInDoc</doc>
            <type name="XMLIn" c:type="GsfXMLIn*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_from_msole"
              c:identifier="gsf_doc_meta_data_read_from_msole"
              version="1.14.24">
        <doc xml:whitespace="preserve">Read a stream formated as a set of MS OLE properties from @in and store the
results in @accum.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">GError which the caller must free on error.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <parameter name="in" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_from_odf"
              c:identifier="gsf_doc_meta_data_read_from_odf"
              version="1.14.24">
        <doc xml:whitespace="preserve">Read an OpenDocument metadata stream from @input and store the properties
into @md.  Overwrite any existing properties with the same id.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a GError if there is a problem.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <parameter name="input" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gsf_doc_meta_data_remove">
        <doc xml:whitespace="preserve">If @name does not exist in the collection, do nothing. If @name does exist,
remove it and its value from the collection</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the non-null string name of the property</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="gsf_doc_meta_data_size">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of items in this collection</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
      </method>
      <method name="steal" c:identifier="gsf_doc_meta_data_steal">
        <return-value transfer-ownership="full">
          <type name="DocProp" c:type="GsfDocProp*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="gsf_doc_meta_data_store">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="prop" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfDocProp</doc>
            <type name="DocProp" c:type="GsfDocProp*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_msole"
              c:identifier="gsf_doc_meta_data_write_to_msole"
              version="1.14.24">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success;</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="out" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutput</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="doc_not_component" transfer-ownership="none">
            <doc xml:whitespace="preserve">a kludge to differentiate DocumentSummary from Summary</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_to_odf"
              c:identifier="gsf_doc_meta_data_write_to_odf"
              version="1.14.24">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if no error occured.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GsfOutput.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="DocProp"
            c:type="GsfDocProp"
            glib:type-name="GsfDocProp"
            glib:get-type="gsf_doc_prop_get_type"
            c:symbol-prefix="doc_prop">
      <doc xml:whitespace="preserve">Class representing a properties of a document.</doc>
      <constructor name="new" c:identifier="gsf_doc_prop_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GsfDocProp which the caller is responsible for freeing. Takes ownership of @name.</doc>
          <type name="DocProp" c:type="GsfDocProp*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dump" c:identifier="gsf_doc_prop_dump">
        <doc xml:whitespace="preserve">A debugging utility to dump @prop as text via g_print
New in 1.14.2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gsf_doc_prop_free">
        <doc xml:whitespace="preserve">If @prop is non %NULL free the memory associated with it</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_link" c:identifier="gsf_doc_prop_get_link">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the current link descriptor of @prop.  The result should not be freed or modified.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gsf_doc_prop_get_name">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the name of the property, the caller should not modify the result.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_val" c:identifier="gsf_doc_prop_get_val">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the value of the property, the caller should not modify the result.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
      </method>
      <method name="set_link" c:identifier="gsf_doc_prop_set_link">
        <doc xml:whitespace="preserve">Sets @prop's link to @link</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="link" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally %NULL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_val" c:identifier="gsf_doc_prop_set_val">
        <doc xml:whitespace="preserve">Assigns @val to @prop, and unsets and frees the current value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="swap_val" c:identifier="gsf_doc_prop_swap_val">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the current value of @prop, and replaces it with @val Caller is responsible for unsetting and freeing the result.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="DocPropVector"
           c:symbol-prefix="docprop_vector"
           c:type="GsfDocPropVector"
           parent="GObject.Object"
           glib:type-name="GsfDocPropVector"
           glib:get-type="gsf_docprop_vector_get_type">
      <constructor name="new" c:identifier="gsf_docprop_vector_new">
        <doc xml:whitespace="preserve">This function creates a new gsf_docprop_vector object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">GsfDocPropVector*</doc>
          <type name="DocPropVector" c:type="GsfDocPropVector*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="gsf_docprop_vector_append">
        <doc xml:whitespace="preserve">Insert a copy of @value as the last element of @vector.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The GValue to add to @vector</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="as_string" c:identifier="gsf_docprop_vector_as_string">
        <doc xml:whitespace="preserve">This function returns a string which represents all the GValues in @vector.
The caller is responsible for freeing the result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a string of comma-separated values</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </class>
    <enumeration name="Error"
                 c:type="GsfError"
                 glib:error-domain="gsf-error-quark">
      <member name="out_of_memory"
              value="0"
              c:identifier="GSF_ERROR_OUT_OF_MEMORY"/>
      <member name="invalid_data"
              value="1"
              c:identifier="GSF_ERROR_INVALID_DATA"/>
    </enumeration>
    <class name="Infile"
           c:symbol-prefix="infile"
           c:type="GsfInfile"
           parent="Input"
           abstract="1"
           glib:type-name="GsfInfile"
           glib:get-type="gsf_infile_get_type"
           glib:type-struct="InfileClass">
      <virtual-method name="child_by_index" introspectable="0" throws="1">
        <return-value>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="child_by_name" introspectable="0" throws="1">
        <return-value>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="name_by_index" invoker="name_by_index">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the utf8 encoded name of the @i-th child &lt;emphasis&gt;DO NOT FREE THE STRING.&lt;/emphasis&gt;</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="num_children" invoker="num_children">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of children the storage has, or -1 if the storage can not have children.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </virtual-method>
      <method name="child_by_aname" c:identifier="gsf_infile_child_by_aname">
        <doc xml:whitespace="preserve">New in 1.14.9.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child which must be unrefed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="names" transfer-ownership="none">
            <doc xml:whitespace="preserve">A %NULL terminated array of names (e.g. from g_strsplit)</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_by_index" c:identifier="gsf_infile_child_by_index">
        <doc xml:whitespace="preserve">TODO : For 2.0 api will change to include a GError.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child which must be unrefed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <doc xml:whitespace="preserve">target index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_by_name" c:identifier="gsf_infile_child_by_name">
        <doc xml:whitespace="preserve">TODO : For 2.0 api will change to include a GError.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child which must be unrefed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">target name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_by_vaname"
              c:identifier="gsf_infile_child_by_vaname"
              introspectable="0">
        <doc xml:whitespace="preserve">New in 1.14.9.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child which must be unrefed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="names" transfer-ownership="none">
            <doc xml:whitespace="preserve">A %NULL terminated array of names (e.g. from g_strsplit)</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="child_by_vname"
              c:identifier="gsf_infile_child_by_vname"
              introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child which must be unrefed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="name_by_index" c:identifier="gsf_infile_name_by_index">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the utf8 encoded name of the @i-th child &lt;emphasis&gt;DO NOT FREE THE STRING.&lt;/emphasis&gt;</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="i" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="num_children" c:identifier="gsf_infile_num_children">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of children the storage has, or -1 if the storage can not have children.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="Input" c:type="GsfInput"/>
      </field>
    </class>
    <record name="InfileClass"
            c:type="GsfInfileClass"
            glib:is-gtype-struct-for="Infile">
      <field name="input_class">
        <type name="InputClass" c:type="GsfInputClass"/>
      </field>
      <field name="num_children">
        <callback name="num_children">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of children the storage has, or -1 if the storage can not have children.</doc>
            <type name="gint" c:type="int"/>
          </return-value>
          <parameters>
            <parameter name="infile" transfer-ownership="none">
              <type name="Infile" c:type="GsfInfile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="name_by_index">
        <callback name="name_by_index">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">the utf8 encoded name of the @i-th child &lt;emphasis&gt;DO NOT FREE THE STRING.&lt;/emphasis&gt;</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="infile" transfer-ownership="none">
              <type name="Infile" c:type="GsfInfile*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_by_index" introspectable="0">
        <callback name="child_by_index" introspectable="0" throws="1">
          <return-value>
            <type name="Input" c:type="GsfInput*"/>
          </return-value>
          <parameters>
            <parameter name="infile" transfer-ownership="none">
              <type name="Infile" c:type="GsfInfile*"/>
            </parameter>
            <parameter name="i" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_by_name" introspectable="0">
        <callback name="child_by_name" introspectable="0" throws="1">
          <return-value>
            <type name="Input" c:type="GsfInput*"/>
          </return-value>
          <parameters>
            <parameter name="infile" transfer-ownership="none">
              <type name="Infile" c:type="GsfInfile*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="InfileMSOle"
           c:symbol-prefix="infile_msole"
           c:type="GsfInfileMSOle"
           parent="Infile"
           glib:type-name="GsfInfileMSOle"
           glib:get-type="gsf_infile_msole_get_type">
      <constructor name="new" c:identifier="gsf_infile_msole_new" throws="1">
        <doc xml:whitespace="preserve">Opens the root directory of an MS OLE file.
&lt;note&gt;This adds a reference to @source.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new ole file handler</doc>
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_class_id" c:identifier="gsf_infile_msole_get_class_id">
        <doc xml:whitespace="preserve">Retrieves the 16 byte indentifier (often a GUID in MS Windows apps)
stored within the directory associated with @ole and stores it in @res.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">16 byte identifier (often a GUID in MS Windows apps)</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="InfileMSVBA"
           c:symbol-prefix="infile_msvba"
           c:type="GsfInfileMSVBA"
           parent="Infile"
           glib:type-name="GsfInfileMSVBA"
           glib:get-type="gsf_infile_msvba_get_type">
      <constructor name="new" c:identifier="gsf_infile_msvba_new" throws="1">
        <return-value transfer-ownership="full">
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <type name="Infile" c:type="GsfInfile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_modules" c:identifier="gsf_infile_msvba_get_modules">
        <doc xml:whitespace="preserve">a collection of names and source code.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%NULL, or a hashtable of names and source code (unknown encoding).</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="steal_modules"
              c:identifier="gsf_infile_msvba_steal_modules">
        <doc xml:whitespace="preserve">A collection of names and source code which the caller is responsible for destroying.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">%NULL, or a hashtable of names and source code (unknown encoding).</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
    </class>
    <class name="InfileStdio"
           c:symbol-prefix="infile_stdio"
           c:type="GsfInfileStdio"
           parent="Infile"
           glib:type-name="GsfInfileStdio"
           glib:get-type="gsf_infile_stdio_get_type">
      <constructor name="new" c:identifier="gsf_infile_stdio_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:whitespace="preserve">in locale dependent encoding</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="InfileTar"
           c:symbol-prefix="infile_tar"
           c:type="GsfInfileTar"
           parent="Infile"
           glib:type-name="GsfInfileTar"
           glib:get-type="gsf_infile_tar_get_type">
      <constructor name="new" c:identifier="gsf_infile_tar_new" throws="1">
        <doc xml:whitespace="preserve">Opens the root directory of a Tar file.
&lt;note&gt;This adds a reference to @source.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new tar file handler</doc>
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">A base #GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Input"/>
      </property>
    </class>
    <class name="InfileZip"
           c:symbol-prefix="infile_zip"
           c:type="GsfInfileZip"
           parent="Infile"
           glib:type-name="GsfInfileZip"
           glib:get-type="gsf_infile_zip_get_type">
      <constructor name="new" c:identifier="gsf_infile_zip_new" throws="1">
        <doc xml:whitespace="preserve">Opens the root directory of a Zip file.
&lt;note&gt;This adds a reference to @source.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new zip file handler</doc>
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">A base #GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="compression-level" transfer-ownership="none">
        <doc xml:whitespace="preserve">Controls the level of compression used for new members.</doc>
        <type name="gint"/>
      </property>
      <property name="internal-parent"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="InfileZip"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Input"/>
      </property>
    </class>
    <class name="Input"
           c:symbol-prefix="input"
           c:type="GsfInput"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GsfInput"
           glib:get-type="gsf_input_get_type"
           glib:type-struct="InputClass">
      <doc xml:whitespace="preserve">Class representing an input stream.</doc>
      <constructor name="mmap_new"
                   c:identifier="gsf_input_mmap_new"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfInputMemory</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">The file on disk that you want to mmap</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="error_id" c:identifier="gsf_input_error_id">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A utility quark to flag a GError as being an input problem.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="Dup" introspectable="0" throws="1">
        <return-value>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="OpenSibling" introspectable="0" throws="1">
        <return-value>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Read">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <parameter name="num_bytes" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="optional_buffer" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Seek">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="whence" transfer-ownership="none">
            <type name="GLib.SeekType" c:type="GSeekType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="container" c:identifier="gsf_input_container">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">but does not add a reference to @input's container. Potentially %NULL</doc>
          <type name="Infile" c:type="GsfInfile*"/>
        </return-value>
      </method>
      <method name="copy" c:identifier="gsf_input_copy">
        <doc xml:whitespace="preserve">Copy the contents from @input to @output from their respective
current positions. So if you want to be sure to copy *everything*,
make sure to call gsf_input_seek (input, 0, G_SEEK_SET) and
gsf_output_seek (output, 0, G_SEEK_SET) first, if applicable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE on Success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">a non-null #GsfOutput</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="gsf_input_dump">
        <doc xml:whitespace="preserve">Dumps @input's contents to STDOUT, optionally in hex format.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dump_as_hex" transfer-ownership="none">
            <doc xml:whitespace="preserve">If %TRUE, dump in hexidecmal format</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="gsf_input_dup" throws="1">
        <doc xml:whitespace="preserve">Duplicates input @src leaving the new one at the same offset.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the duplicate, or %NULL on error</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
      </method>
      <method name="eof" c:identifier="gsf_input_eof">
        <doc xml:whitespace="preserve">Are we at the end of the file ?</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the input is at the eof.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="find_vba" c:identifier="gsf_input_find_vba" throws="1">
        <doc xml:whitespace="preserve">A utility routine that attempts to find the VBA file withint a stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a GsfInfileMSVBA *gsf_input_find_vba (GsfInput *input, GError *err);</doc>
          <type name="InfileMSVBA" c:type="GsfInfileMSVBA*"/>
        </return-value>
      </method>
      <method name="name" c:identifier="gsf_input_name">
        <doc xml:whitespace="preserve">The name of the input stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@input's name in utf8 form, or %NULL if it has no name.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="read" c:identifier="gsf_input_read">
        <doc xml:whitespace="preserve">Read at least @num_bytes.  Does not change the current position if there
is an error.  Will only read if the entire amount can be read.  Invalidates
the buffer associated with previous calls to gsf_input_read.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to the buffer or %NULL if there is an error or 0 bytes are requested.</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="num_bytes" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of bytes to read</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="optional_buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">%NULL, or pointer to destination memory area</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remaining" c:identifier="gsf_input_remaining">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of bytes left in the file.</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
      </method>
      <method name="seek" c:identifier="gsf_input_seek">
        <doc xml:whitespace="preserve">Move the current location in the input stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">target offset</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="whence" transfer-ownership="none">
            <doc xml:whitespace="preserve">determines whether the offset is relative to the beginning or the end of the stream, or to the current location.</doc>
            <type name="GLib.SeekType" c:type="GSeekType"/>
          </parameter>
        </parameters>
      </method>
      <method name="seek_emulate" c:identifier="gsf_input_seek_emulate">
        <doc xml:whitespace="preserve">Emulate forward seeks by reading.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the emulation failed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="pos" transfer-ownership="none">
            <doc xml:whitespace="preserve">absolute position to seek to</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_container" c:identifier="gsf_input_set_container">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <type name="Infile" c:type="GsfInfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gsf_input_set_name">
        <doc xml:whitespace="preserve">protected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new name of the stream, or %NULL.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name_from_filename"
              c:identifier="gsf_input_set_name_from_filename">
        <doc xml:whitespace="preserve">protected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the (fs-sys encoded) filename</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="gsf_input_set_size">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of the stream</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="sibling" c:identifier="gsf_input_sibling" throws="1">
        <doc xml:whitespace="preserve">UNIMPLEMENTED BY ANY BACKEND
	and it is probably unnecessary.   gsf_input_get_container provides
	enough power to do what is necessary.

Attempts to open a 'sibling' of @input.  The caller is responsible for
managing the resulting object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A related #GsfInput or %NULL on failure.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="gsf_input_size">
        <doc xml:whitespace="preserve">Looks up and caches the number of bytes in the input</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the size or -1 on error</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
      </method>
      <method name="tell" c:identifier="gsf_input_tell">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current offset in the file.</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
      </method>
      <method name="uncompress" c:identifier="gsf_input_uncompress">
        <doc xml:whitespace="preserve">This functions takes ownership of the incoming reference and yields a
new one as its output.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A stream equivalent to the source stream, but uncompressed if the source was compressed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
      </method>
      <property name="eof" transfer-ownership="none">
        <doc xml:whitespace="preserve">True if the end of the file has been reached.</doc>
        <type name="gboolean"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="position" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <property name="remaining" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <field name="g_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="size">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="cur_offset">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="container">
        <type name="Infile" c:type="GsfInfile*"/>
      </field>
    </class>
    <record name="InputClass"
            c:type="GsfInputClass"
            glib:is-gtype-struct-for="Input">
      <field name="g_object_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="Dup" introspectable="0">
        <callback name="Dup" introspectable="0" throws="1">
          <return-value>
            <type name="Input" c:type="GsfInput*"/>
          </return-value>
          <parameters>
            <parameter name="input" transfer-ownership="none">
              <type name="Input" c:type="GsfInput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="Read">
        <callback name="Read">
          <return-value transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </return-value>
          <parameters>
            <parameter name="input" transfer-ownership="none">
              <type name="Input" c:type="GsfInput*"/>
            </parameter>
            <parameter name="num_bytes" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
            <parameter name="optional_buffer" transfer-ownership="none">
              <type name="guint8" c:type="guint8*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="Seek">
        <callback name="Seek">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="input" transfer-ownership="none">
              <type name="Input" c:type="GsfInput*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="gsf_off_t" c:type="gsf_off_t"/>
            </parameter>
            <parameter name="whence" transfer-ownership="none">
              <type name="GLib.SeekType" c:type="GSeekType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="OpenSibling" introspectable="0">
        <callback name="OpenSibling" introspectable="0" throws="1">
          <return-value>
            <type name="Input" c:type="GsfInput*"/>
          </return-value>
          <parameters>
            <parameter name="input" transfer-ownership="none">
              <type name="Input" c:type="GsfInput*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gsf_reserved0" introspectable="0">
        <callback name="_gsf_reserved0">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved1" introspectable="0">
        <callback name="_gsf_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved2" introspectable="0">
        <callback name="_gsf_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved3" introspectable="0">
        <callback name="_gsf_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="InputGZip"
           c:symbol-prefix="input_gzip"
           c:type="GsfInputGZip"
           parent="Input"
           glib:type-name="GsfInputGZip"
           glib:get-type="gsf_input_gzip_get_type">
      <constructor name="new" c:identifier="gsf_input_gzip_new" throws="1">
        <doc xml:whitespace="preserve">Adds a reference to @source.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="raw"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Input"/>
      </property>
      <property name="uncompressed-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64"/>
      </property>
    </class>
    <class name="InputGio"
           c:symbol-prefix="input_gio"
           c:type="GsfInputGio"
           parent="Input"
           glib:type-name="GsfInputGio"
           glib:get-type="gsf_input_gio_get_type">
      <constructor name="new" c:identifier="gsf_input_gio_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfOutputGio or NULL</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_path"
                   c:identifier="gsf_input_gio_new_for_path"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfOutputGio or NULL</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_uri"
                   c:identifier="gsf_input_gio_new_for_uri"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfOutputGio or NULL</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="InputHTTP"
           c:symbol-prefix="input_http"
           c:type="GsfInputHTTP"
           parent="Input"
           glib:type-name="GsfInputHTTP"
           glib:get-type="gsf_input_http_get_type">
      <constructor name="new" c:identifier="gsf_input_http_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an open HTTP connection, ready for reading.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string containing the URL to retrieve</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_content_type"
              c:identifier="gsf_input_http_get_content_type">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an allocated string containing the Content-Type field of the HTTP response.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url" c:identifier="gsf_input_http_get_url">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an allocated string containing the URL used for input.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="content-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
    </class>
    <class name="InputMemory"
           c:symbol-prefix="input_memory"
           c:type="GsfInputMemory"
           parent="Input"
           glib:type-name="GsfInputMemory"
           glib:get-type="gsf_input_memory_get_type">
      <constructor name="new" c:identifier="gsf_input_memory_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfInputMemory</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">The input bytes</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">The length of @buf</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="needs_free" transfer-ownership="none">
            <doc xml:whitespace="preserve">Whether you want this memory to be free'd at object destruction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_clone" c:identifier="gsf_input_memory_new_clone">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GsfInputMemory</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">The input bytes</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:whitespace="preserve">The length of @buf</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_bzip"
                   c:identifier="gsf_input_memory_new_from_bzip"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GsfInputMemory or %NULL.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_iochannel"
                   c:identifier="gsf_input_memory_new_from_iochannel"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GsfInputMemory or NULL.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GIOChannel.</doc>
            <type name="GLib.IOChannel" c:type="GIOChannel*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="InputProxy"
           c:symbol-prefix="input_proxy"
           c:type="GsfInputProxy"
           parent="Input"
           glib:type-name="GsfInputProxy"
           glib:get-type="gsf_input_proxy_get_type">
      <constructor name="new" c:identifier="gsf_input_proxy_new">
        <doc xml:whitespace="preserve">This creates a new proxy to the entire, given input source.  See
gsf_input_proxy_new_section for details.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new input object.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_section"
                   c:identifier="gsf_input_proxy_new_section">
        <doc xml:whitespace="preserve">This creates a new proxy to a section of the given source.  The new
object will have its own current position, but any operation on it
can change the source's position.

If a proxy to a proxy is created, the intermediate proxy is short-
circuited.

This function will ref the source.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new input object.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">Offset into source for start of section.</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">Length of section.</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="InputStdio"
           c:symbol-prefix="input_stdio"
           c:type="GsfInputStdio"
           parent="Input"
           glib:type-name="GsfInputStdio"
           glib:get-type="gsf_input_stdio_get_type">
      <constructor name="new" c:identifier="gsf_input_stdio_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or NULL.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">in utf8.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_FILE" c:identifier="gsf_input_stdio_new_FILE">
        <doc xml:whitespace="preserve">Assumes ownership of @file when succeeding.  If @keep_open is true,
ownership reverts to caller when the GsfObject is closed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new GsfInput wrapper for @file.  Note that if the file is not seekable, this function will make a local copy of the entire file.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">The filename corresponding to @file.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing stdio &lt;type&gt;FILE&lt;/type&gt; *</doc>
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
          <parameter name="keep_open" transfer-ownership="none">
            <doc xml:whitespace="preserve">Should @file be closed when the wrapper is closed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="InputTextline"
           c:symbol-prefix="input_textline"
           c:type="GsfInputTextline"
           parent="Input"
           glib:type-name="GsfInputTextline"
           glib:get-type="gsf_input_textline_get_type">
      <constructor name="new" c:identifier="gsf_input_textline_new">
        <doc xml:whitespace="preserve">&lt;note&gt;This adds a reference to @source.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">in some combination of ascii and utf8</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="ascii_gets" c:identifier="gsf_input_textline_ascii_gets">
        <doc xml:whitespace="preserve">A utility routine to read things line by line from the underlying source.
Trailing newlines and carriage returns are stripped, and the resultant buffer
can be edited.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the string read, or %NULL on eof.</doc>
          <type name="guint8" c:type="unsigned char*"/>
        </return-value>
      </method>
      <method name="utf8_gets" c:identifier="gsf_input_textline_utf8_gets">
        <doc xml:whitespace="preserve">A utility routine to read things line by line from the underlying source.
Trailing newlines and carriage returns are stripped, and the resultant buffer
can be edited.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the string read, or %NULL on eof.</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
      </method>
    </class>
    <constant name="META_NAME_BYTE_COUNT"
              value="gsf:byte-count"
              c:type="GSF_META_NAME_BYTE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CASE_SENSITIVE"
              value="gsf:case-sensitivity"
              c:type="GSF_META_NAME_CASE_SENSITIVE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CATEGORY"
              value="gsf:category"
              c:type="GSF_META_NAME_CATEGORY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CELL_COUNT"
              value="gsf:cell-count"
              c:type="GSF_META_NAME_CELL_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CHARACTER_COUNT"
              value="gsf:character-count"
              c:type="GSF_META_NAME_CHARACTER_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CODEPAGE"
              value="msole:codepage"
              c:type="GSF_META_NAME_CODEPAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_COMPANY"
              value="dc:publisher"
              c:type="GSF_META_NAME_COMPANY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_CREATOR"
              value="dc:creator"
              c:type="GSF_META_NAME_CREATOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_DATE_CREATED"
              value="meta:creation-date"
              c:type="GSF_META_NAME_DATE_CREATED">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_DATE_MODIFIED"
              value="dc:date"
              c:type="GSF_META_NAME_DATE_MODIFIED">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_DESCRIPTION"
              value="dc:description"
              c:type="GSF_META_NAME_DESCRIPTION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_DICTIONARY"
              value="gsf:dictionary"
              c:type="GSF_META_NAME_DICTIONARY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_DOCUMENT_PARTS"
              value="gsf:document-parts"
              c:type="GSF_META_NAME_DOCUMENT_PARTS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_EDITING_DURATION"
              value="meta:editing-duration"
              c:type="GSF_META_NAME_EDITING_DURATION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_GENERATOR"
              value="meta:generator"
              c:type="GSF_META_NAME_GENERATOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_HEADING_PAIRS"
              value="gsf:heading-pairs"
              c:type="GSF_META_NAME_HEADING_PAIRS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_HIDDEN_SLIDE_COUNT"
              value="gsf:hidden-slide-count"
              c:type="GSF_META_NAME_HIDDEN_SLIDE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_IMAGE_COUNT"
              value="gsf:image-count"
              c:type="GSF_META_NAME_IMAGE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_INITIAL_CREATOR"
              value="meta:initial-creator"
              c:type="GSF_META_NAME_INITIAL_CREATOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_KEYWORD"
              value="meta:keyword"
              c:type="GSF_META_NAME_KEYWORD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_KEYWORDS"
              value="dc:keywords"
              c:type="GSF_META_NAME_KEYWORDS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LANGUAGE"
              value="dc:language"
              c:type="GSF_META_NAME_LANGUAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LAST_PRINTED"
              value="gsf:last-printed"
              c:type="GSF_META_NAME_LAST_PRINTED">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LAST_SAVED_BY"
              value="gsf:last-saved-by"
              c:type="GSF_META_NAME_LAST_SAVED_BY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LINE_COUNT"
              value="gsf:line-count"
              c:type="GSF_META_NAME_LINE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LINKS_DIRTY"
              value="gsf:links-dirty"
              c:type="GSF_META_NAME_LINKS_DIRTY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_LOCALE_SYSTEM_DEFAULT"
              value="gsf:default-locale"
              c:type="GSF_META_NAME_LOCALE_SYSTEM_DEFAULT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MANAGER"
              value="gsf:manager"
              c:type="GSF_META_NAME_MANAGER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MM_CLIP_COUNT"
              value="gsf:MM-clip-count"
              c:type="GSF_META_NAME_MM_CLIP_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_17"
              value="msole:unknown-doc-17"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_17">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_18"
              value="msole:unknown-doc-18"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_18">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_19"
              value="msole:unknown-doc-19"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_19">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_20"
              value="msole:unknown-doc-20"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_20">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_21"
              value="msole:unknown-doc-21"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_21">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_22"
              value="msole:unknown-doc-22"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_22">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_MSOLE_UNKNOWN_23"
              value="msole:unknown-doc-23"
              c:type="GSF_META_NAME_MSOLE_UNKNOWN_23">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_NOTE_COUNT"
              value="gsf:note-count"
              c:type="GSF_META_NAME_NOTE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_OBJECT_COUNT"
              value="gsf:object-count"
              c:type="GSF_META_NAME_OBJECT_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_PAGE_COUNT"
              value="gsf:page-count"
              c:type="GSF_META_NAME_PAGE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_PARAGRAPH_COUNT"
              value="gsf:paragraph-count"
              c:type="GSF_META_NAME_PARAGRAPH_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_PRESENTATION_FORMAT"
              value="gsf:presentation-format"
              c:type="GSF_META_NAME_PRESENTATION_FORMAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_PRINTED_BY"
              value="meta:printed-by"
              c:type="GSF_META_NAME_PRINTED_BY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_PRINT_DATE"
              value="meta:print-date"
              c:type="GSF_META_NAME_PRINT_DATE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_REVISION_COUNT"
              value="meta:editing-cycles"
              c:type="GSF_META_NAME_REVISION_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_SCALE"
              value="gsf:scale"
              c:type="GSF_META_NAME_SCALE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_SECURITY"
              value="gsf:security"
              c:type="GSF_META_NAME_SECURITY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_SLIDE_COUNT"
              value="gsf:slide-count"
              c:type="GSF_META_NAME_SLIDE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_SPREADSHEET_COUNT"
              value="gsf:spreadsheet-count"
              c:type="GSF_META_NAME_SPREADSHEET_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_SUBJECT"
              value="dc:subject"
              c:type="GSF_META_NAME_SUBJECT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_TABLE_COUNT"
              value="gsf:table-count"
              c:type="GSF_META_NAME_TABLE_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_TEMPLATE"
              value="meta:template"
              c:type="GSF_META_NAME_TEMPLATE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_THUMBNAIL"
              value="gsf:thumbnail"
              c:type="GSF_META_NAME_THUMBNAIL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_TITLE"
              value="dc:title"
              c:type="GSF_META_NAME_TITLE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="META_NAME_WORD_COUNT"
              value="gsf:word-count"
              c:type="GSF_META_NAME_WORD_COUNT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="MSOleSortingKey"
            c:type="GsfMSOleSortingKey"
            glib:type-name="GsfMSOleSortingKey"
            glib:get-type="gsf_msole_sorting_key_get_type"
            c:symbol-prefix="msole_sorting_key">
      <constructor name="new" c:identifier="gsf_msole_sorting_key_new">
        <return-value transfer-ownership="full">
          <type name="MSOleSortingKey" c:type="GsfMSOleSortingKey*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cmp" c:identifier="gsf_msole_sorting_key_cmp">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="b" transfer-ownership="none">
            <type name="MSOleSortingKey" c:type="const GsfMSOleSortingKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gsf_msole_sorting_key_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="ODFOut"
           c:symbol-prefix="odf_out"
           c:type="GsfODFOut"
           parent="XMLOut"
           glib:type-name="GsfODFOut"
           glib:get-type="gsf_odf_out_get_type"
           glib:type-struct="ODFOutClass">
      <method name="get_version" c:identifier="gsf_odf_out_get_version">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_version_string"
              c:identifier="gsf_odf_out_get_version_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <property name="odf-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <field name="base">
        <type name="XMLOut" c:type="GsfXMLOut"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="_GsfODFOutPrivate*"/>
      </field>
    </class>
    <record name="ODFOutClass"
            c:type="GsfODFOutClass"
            glib:is-gtype-struct-for="ODFOut">
      <field name="base">
        <type name="XMLOutClass" c:type="GsfXMLOutClass"/>
      </field>
      <field name="_gsf_reserved1" introspectable="0">
        <callback name="_gsf_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved2" introspectable="0">
        <callback name="_gsf_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved3" introspectable="0">
        <callback name="_gsf_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved4" introspectable="0">
        <callback name="_gsf_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="OLE_DEFAULT_BB_SHIFT"
              value="9"
              c:type="OLE_DEFAULT_BB_SHIFT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_DEFAULT_SB_SHIFT"
              value="6"
              c:type="OLE_DEFAULT_SB_SHIFT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_BB_SHIFT"
              value="30"
              c:type="OLE_HEADER_BB_SHIFT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_BYTE_ORDER"
              value="28"
              c:type="OLE_HEADER_BYTE_ORDER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_CLSID" value="8" c:type="OLE_HEADER_CLSID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_CSECTDIR"
              value="40"
              c:type="OLE_HEADER_CSECTDIR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_DIRENT_START"
              value="48"
              c:type="OLE_HEADER_DIRENT_START">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_MAJOR_VER"
              value="26"
              c:type="OLE_HEADER_MAJOR_VER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_METABAT_BLOCK"
              value="68"
              c:type="OLE_HEADER_METABAT_BLOCK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_METABAT_SIZE"
              value="0"
              c:type="OLE_HEADER_METABAT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_MINOR_VER"
              value="24"
              c:type="OLE_HEADER_MINOR_VER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_NUM_BAT" value="44" c:type="OLE_HEADER_NUM_BAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_NUM_METABAT"
              value="72"
              c:type="OLE_HEADER_NUM_METABAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_NUM_SBAT"
              value="64"
              c:type="OLE_HEADER_NUM_SBAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_SBAT_START"
              value="60"
              c:type="OLE_HEADER_SBAT_START">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_SB_SHIFT"
              value="32"
              c:type="OLE_HEADER_SB_SHIFT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_SIGNATURE"
              value="0"
              c:type="OLE_HEADER_SIGNATURE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_SIZE" value="512" c:type="OLE_HEADER_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_START_BAT"
              value="76"
              c:type="OLE_HEADER_START_BAT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="OLE_HEADER_THRESHOLD"
              value="56"
              c:type="OLE_HEADER_THRESHOLD">
      <type name="gint" c:type="gint"/>
    </constant>
    <callback name="OpenPkgIter" c:type="GsfOpenPkgIter">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="rel" transfer-ownership="none">
          <type name="OpenPkgRel" c:type="GsfOpenPkgRel*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="OpenPkgRel" c:type="GsfOpenPkgRel" disguised="1">
      <method name="get_target" c:identifier="gsf_open_pkg_rel_get_target">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">const pointer to @rel's target.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_type" c:identifier="gsf_open_pkg_rel_get_type">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">const pointer to @rel's type.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="is_extern" c:identifier="gsf_open_pkg_rel_is_extern">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @rel has mode 'External'</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
    </record>
    <record name="OpenPkgRels" c:type="GsfOpenPkgRels" disguised="1">
    </record>
    <class name="Outfile"
           c:symbol-prefix="outfile"
           c:type="GsfOutfile"
           parent="Output"
           abstract="1"
           glib:type-name="GsfOutfile"
           glib:get-type="gsf_outfile_get_type"
           glib:type-struct="OutfileClass">
      <doc xml:whitespace="preserve">Class representing an output file, counterpart to #GsfInfile.</doc>
      <virtual-method name="new_child" introspectable="0">
        <return-value>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_dir" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="new_child" c:identifier="gsf_outfile_new_child">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the new child to create</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE to create a directory, %FALSE to create a plain file</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_child_full"
              c:identifier="gsf_outfile_new_child_full"
              introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the new child to create</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE to create a directory, FALSE to create a plain file</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="new_child_varg"
              c:identifier="gsf_outfile_new_child_varg"
              introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly created child</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name of the new child to create</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_dir" transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE to create a directory, FALSE to create a plain file</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_pkg_add_rel"
              c:identifier="gsf_outfile_open_pkg_add_rel">
        <doc xml:whitespace="preserve">A convenience wrapper to create a child in @dir of @content_type then create
a @type relation to @parent</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new part.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">target name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">non-%NULL content type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutfile</doc>
            <type name="Outfile" c:type="GsfOutfile*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">target type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Output" c:type="GsfOutput"/>
      </field>
    </class>
    <record name="OutfileClass"
            c:type="GsfOutfileClass"
            glib:is-gtype-struct-for="Outfile">
      <field name="output_class">
        <type name="OutputClass" c:type="GsfOutputClass"/>
      </field>
      <field name="new_child" introspectable="0">
        <callback name="new_child" introspectable="0">
          <return-value>
            <type name="Output" c:type="GsfOutput*"/>
          </return-value>
          <parameters>
            <parameter name="outfile" transfer-ownership="none">
              <type name="Outfile" c:type="GsfOutfile*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="is_dir" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="first_property_name" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="va_list" c:type="va_list"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OutfileMSOle"
           c:symbol-prefix="outfile_msole"
           c:type="GsfOutfileMSOle"
           parent="Outfile"
           glib:type-name="GsfOutfileMSOle"
           glib:get-type="gsf_outfile_msole_get_type">
      <constructor name="new" c:identifier="gsf_outfile_msole_new">
        <doc xml:whitespace="preserve">Creates the root directory of an MS OLE file and manages the addition of
children.

&lt;note&gt;This adds a reference to @sink.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new ole file handler.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GsfOutput to hold the OLE2 file</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="gsf_outfile_msole_new_full">
        <doc xml:whitespace="preserve">Creates the root directory of an MS OLE file and manages the addition of
children.

&lt;note&gt;This adds a reference to @sink.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new ole file handler.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GsfOutput to hold the OLE2 file.</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="bb_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of large blocks.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="sb_size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of small blocks.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_class_id"
              c:identifier="gsf_outfile_msole_set_class_id">
        <doc xml:whitespace="preserve">Write @clsid to the directory associated with @ole.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="clsid" transfer-ownership="none">
            <doc xml:whitespace="preserve">16 byte identifier (often a GUID in MS Windows apps)</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="OutfileOpenPkg"
           c:symbol-prefix="outfile_open_pkg"
           c:type="GsfOutfileOpenPkg"
           parent="Outfile"
           glib:type-name="GsfOutfileOpenPkg"
           glib:get-type="gsf_outfile_open_pkg_get_type">
      <constructor name="new" c:identifier="gsf_outfile_open_pkg_new">
        <doc xml:whitespace="preserve">Convenience routine to create a GsfOutfileOpenPkg inside @sink.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a GsfOutfile that the caller is responsible for.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutfile</doc>
            <type name="Outfile" c:type="GsfOutfile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_extern_rel"
              c:identifier="gsf_outfile_open_pkg_add_extern_rel">
        <doc xml:whitespace="preserve">Add an external relation to @parent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The id of the relation.  The string is managed by the parent and should not be changed or freed by the caller.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">target type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">target content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="relate" c:identifier="gsf_outfile_open_pkg_relate">
        <doc xml:whitespace="preserve">Create a relationship between @child and @parent of @type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the relID which the caller does not own but will live as long as @parent.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutfileOpenPkg</doc>
            <type name="OutfileOpenPkg" c:type="GsfOutfileOpenPkg*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">target type</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_content_type"
              c:identifier="gsf_outfile_open_pkg_set_content_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sink" c:identifier="gsf_outfile_open_pkg_set_sink">
        <doc xml:whitespace="preserve">Assigns a GsfOutput (@sink) to store the package into.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutput</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="is-dir"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sink"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Outfile"/>
      </property>
    </class>
    <class name="OutfileStdio"
           c:symbol-prefix="outfile_stdio"
           c:type="GsfOutfileStdio"
           parent="Outfile"
           glib:type-name="GsfOutfileStdio"
           glib:get-type="gsf_outfile_stdio_get_type">
      <constructor name="new" c:identifier="gsf_outfile_stdio_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new outfile or NULL.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:whitespace="preserve">root directory in utf8.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="gsf_outfile_stdio_new_full"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new outfile or NULL.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:whitespace="preserve">root directory in utf8.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL.</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of first property to set</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="gsf_outfile_stdio_new_valist"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new outfile or NULL.</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:whitespace="preserve">root directory in utf8.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL.</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of first property to set</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:whitespace="preserve">a %NULL-terminated #va_list</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="OutfileZip"
           c:symbol-prefix="outfile_zip"
           c:type="GsfOutfileZip"
           parent="Outfile"
           glib:type-name="GsfOutfileZip"
           glib:get-type="gsf_outfile_zip_get_type">
      <constructor name="new" c:identifier="gsf_outfile_zip_new" throws="1">
        <doc xml:whitespace="preserve">Creates the root directory of a Zip file and manages the addition of
children.

&lt;note&gt;This adds a reference to @sink.&lt;/note&gt;</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new zip file handler</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GsfOutput to hold the ZIP file</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_compression_method"
              c:identifier="gsf_outfile_zip_set_compression_method">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <type name="ZipCompressionMethod"
                  c:type="GsfZipCompressionMethod"/>
          </parameter>
        </parameters>
      </method>
      <property name="compression-level"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="entry-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="sink"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Output"/>
      </property>
    </class>
    <class name="Output"
           c:symbol-prefix="output"
           c:type="GsfOutput"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GsfOutput"
           glib:get-type="gsf_output_get_type"
           glib:type-struct="OutputClass">
      <doc xml:whitespace="preserve">Class representing an output stream, counterpart to #GsfInput.</doc>
      <function name="error_id" c:identifier="gsf_output_error_id">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="unwrap" c:identifier="gsf_output_unwrap">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the unwrapping succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="wrapper" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="wrapee" transfer-ownership="none">
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </function>
      <function name="wrap" c:identifier="gsf_output_wrap">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the wrapping succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="wrapper" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="wrapee" transfer-ownership="none">
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="Close">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="Seek">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="whence" transfer-ownership="none">
            <type name="GLib.SeekType" c:type="GSeekType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Vprintf" introspectable="0">
        <return-value transfer-ownership="none">
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="Write">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="num_bytes" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="gsf_output_close">
        <doc xml:whitespace="preserve">Close a stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="container" c:identifier="gsf_output_container">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">but does not add a reference to @output's container. Potentially %NULL</doc>
          <type name="Outfile" c:type="GsfOutfile*"/>
        </return-value>
      </method>
      <method name="error" c:identifier="gsf_output_error">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the last error logged on the output, or %NULL.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
      </method>
      <method name="is_closed" c:identifier="gsf_output_is_closed">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @output has already been closed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="name" c:identifier="gsf_output_name">
        <doc xml:whitespace="preserve">Give the name of @output.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@output's name in utf8 form, DO NOT FREE THIS STRING</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="printf"
              c:identifier="gsf_output_printf"
              introspectable="0">
        <doc xml:whitespace="preserve">Output @Varargs to @output using the format string @format, similar to
&lt;citerefentry&gt;&lt;refentrytitle&gt;printf&lt;/refentrytitle&gt;
&lt;manvolnum&gt;3&lt;/manvolnum&gt;&lt;/citerefentry&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if successful, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">The printf-style format string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="puts" c:identifier="gsf_output_puts">
        <doc xml:whitespace="preserve">Like fputs, this assumes that the line already ends with a newline</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if successful, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="line" transfer-ownership="none">
            <doc xml:whitespace="preserve">%null terminated string to write</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="seek" c:identifier="gsf_output_seek">
        <doc xml:whitespace="preserve">Reposition in output stream @output. @whence specifies what the offset is
relative to: the beginning of the stream (%G_SEEK_SET), current position in
the stream (%G_SEEK_CUR) or the end of the stream (%G_SEEK_END).
This function is similar to
&lt;citerefentry&gt;&lt;refentrytitle&gt;fseek&lt;/refentrytitle&gt;
&lt;manvolnum&gt;3&lt;/manvolnum&gt;&lt;/citerefentry&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:whitespace="preserve">Relative amount to reposition</doc>
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="whence" transfer-ownership="none">
            <doc xml:whitespace="preserve">What the offset is relative to.</doc>
            <type name="GLib.SeekType" c:type="GSeekType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_container" c:identifier="gsf_output_set_container">
        <doc xml:whitespace="preserve">&lt;note&gt;This is a utility routine that should only be used by derived
outputs.&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutfile</doc>
            <type name="Outfile" c:type="GsfOutfile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error"
              c:identifier="gsf_output_set_error"
              introspectable="0">
        <doc xml:whitespace="preserve">&lt;note&gt;This is a utility routine that should only be used by derived
outputs.&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Always returns %FALSE to facilitate its use.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:whitespace="preserve">The error id</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">printf style format string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="gsf_output_set_name">
        <doc xml:whitespace="preserve">&lt;note&gt;This is a utility routine that should only be used by derived
outputs.&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name_from_filename"
              c:identifier="gsf_output_set_name_from_filename">
        <doc xml:whitespace="preserve">&lt;note&gt;This is a utility routine that should only be used by derived
outputs.&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the assignment was ok.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the (fs-sys encoded) filename</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="gsf_output_size">
        <doc xml:whitespace="preserve">Determine the size of the output stream @output.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the size of the output, or -1 if it does not have a size.</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
      </method>
      <method name="tell" c:identifier="gsf_output_tell">
        <doc xml:whitespace="preserve">Tell the current position in @output, similar to
&lt;citerefentry&gt;&lt;refentrytitle&gt;ftell&lt;/refentrytitle&gt;
&lt;manvolnum&gt;3&lt;/manvolnum&gt;&lt;/citerefentry&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current position in the file</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
      </method>
      <method name="vprintf"
              c:identifier="gsf_output_vprintf"
              introspectable="0">
        <doc xml:whitespace="preserve">Output @args to @output using the format string @format, similar to
&lt;citerefentry&gt;&lt;refentrytitle&gt;vprintf&lt;/refentrytitle&gt;
&lt;manvolnum&gt;3&lt;/manvolnum&gt;&lt;/citerefentry&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of bytes printed, a negative value if not successful</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">The printf-style format string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:whitespace="preserve">the arguments for @format</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="gsf_output_write">
        <doc xml:whitespace="preserve">Write @num_bytes of @data to @output.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="num_bytes" transfer-ownership="none">
            <doc xml:whitespace="preserve">Number of bytes to write</doc>
            <type name="gulong" c:type="size_t"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Data to write.</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-closed" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="position" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <property name="size" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <field name="g_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="cur_size">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="cur_offset">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="wrapped_by">
        <type name="GObject.Object" c:type="GObject*"/>
      </field>
      <field name="container">
        <type name="Outfile" c:type="GsfOutfile*"/>
      </field>
      <field name="err">
        <type name="GLib.Error" c:type="GError*"/>
      </field>
      <field name="is_closed">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="printf_buf">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="printf_buf_size">
        <type name="gint" c:type="int"/>
      </field>
    </class>
    <class name="OutputBzip"
           c:symbol-prefix="output_bzip"
           c:type="GsfOutputBzip"
           parent="Output"
           glib:type-name="GsfOutputBzip"
           glib:get-type="gsf_output_bzip_get_type">
      <constructor name="new" c:identifier="gsf_output_bzip_new" throws="1">
        <doc xml:whitespace="preserve">Adds a reference to @sink.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="OutputClass"
            c:type="GsfOutputClass"
            glib:is-gtype-struct-for="Output">
      <field name="g_object_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="Close">
        <callback name="Close">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="Output" c:type="GsfOutput*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="Seek">
        <callback name="Seek">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="Output" c:type="GsfOutput*"/>
            </parameter>
            <parameter name="offset" transfer-ownership="none">
              <type name="gsf_off_t" c:type="gsf_off_t"/>
            </parameter>
            <parameter name="whence" transfer-ownership="none">
              <type name="GLib.SeekType" c:type="GSeekType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="Write">
        <callback name="Write">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="Output" c:type="GsfOutput*"/>
            </parameter>
            <parameter name="num_bytes" transfer-ownership="none">
              <type name="gulong" c:type="size_t"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="guint8" c:type="guint8*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="Vprintf" introspectable="0">
        <callback name="Vprintf" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </return-value>
          <parameters>
            <parameter name="output" transfer-ownership="none">
              <type name="Output" c:type="GsfOutput*"/>
            </parameter>
            <parameter name="format" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="args" transfer-ownership="none">
              <type name="va_list" c:type="va_list"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OutputCsv"
           c:symbol-prefix="output_csv"
           c:type="GsfOutputCsv"
           parent="Output"
           glib:type-name="GsfOutputCsv"
           glib:get-type="gsf_output_csv_get_type"
           glib:type-struct="OutputCsvClass">
      <method name="write_eol" c:identifier="gsf_output_csv_write_eol">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="write_field" c:identifier="gsf_output_csv_write_field">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="field" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="gulong" c:type="size_t"/>
          </parameter>
        </parameters>
      </method>
      <property name="eol"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="quote"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="quoting-mode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="OutputCsvQuotingMode"/>
      </property>
      <property name="quoting-on-whitespace"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="quoting-triggers" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="separator"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="sink" writable="1" transfer-ownership="none">
        <type name="Output"/>
      </property>
      <field name="output">
        <type name="Output" c:type="GsfOutput"/>
      </field>
      <field name="sink">
        <type name="Output" c:type="GsfOutput*"/>
      </field>
      <field name="quote">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="quote_len">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="quoting_mode">
        <type name="OutputCsvQuotingMode" c:type="GsfOutputCsvQuotingMode"/>
      </field>
      <field name="quoting_triggers">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="eol">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="eol_len">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="separator">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="separator_len">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="fields_on_line">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="buf">
        <type name="GLib.String" c:type="GString*"/>
      </field>
    </class>
    <record name="OutputCsvClass"
            c:type="GsfOutputCsvClass"
            glib:is-gtype-struct-for="OutputCsv">
      <field name="output_class">
        <type name="OutputClass" c:type="GsfOutputClass"/>
      </field>
    </record>
    <enumeration name="OutputCsvQuotingMode"
                 glib:type-name="GsfOutputCsvQuotingMode"
                 glib:get-type="gsf_output_csv_quoting_mode_get_type"
                 c:type="GsfOutputCsvQuotingMode">
      <doc xml:whitespace="preserve">Controls when to add quotes around fields.</doc>
      <member name="never"
              value="0"
              c:identifier="GSF_OUTPUT_CSV_QUOTING_MODE_NEVER"
              glib:nick="never"/>
      <member name="auto"
              value="1"
              c:identifier="GSF_OUTPUT_CSV_QUOTING_MODE_AUTO"
              glib:nick="auto"/>
      <member name="always"
              value="2"
              c:identifier="GSF_OUTPUT_CSV_QUOTING_MODE_ALWAYS"
              glib:nick="always"/>
    </enumeration>
    <class name="OutputGZip"
           c:symbol-prefix="output_gzip"
           c:type="GsfOutputGZip"
           parent="Output"
           glib:type-name="GsfOutputGZip"
           glib:get-type="gsf_output_gzip_get_type">
      <constructor name="new" c:identifier="gsf_output_gzip_new" throws="1">
        <doc xml:whitespace="preserve">Adds a reference to @sink.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="raw"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sink"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Output"/>
      </property>
    </class>
    <class name="OutputGio"
           c:symbol-prefix="output_gio"
           c:type="GsfOutputGio"
           parent="Output"
           glib:type-name="GsfOutputGio"
           glib:get-type="gsf_output_gio_get_type">
      <constructor name="new" c:identifier="gsf_output_gio_new">
        <return-value transfer-ownership="full">
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_path"
                   c:identifier="gsf_output_gio_new_for_path"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_uri"
                   c:identifier="gsf_output_gio_new_for_uri"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="OutputIOChannel"
           c:symbol-prefix="output_iochannel"
           c:type="GsfOutputIOChannel"
           parent="Output"
           glib:type-name="GsfOutputIOChannel"
           glib:get-type="gsf_output_iochannel_get_type">
      <constructor name="new" c:identifier="gsf_output_iochannel_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GIOChannel</doc>
            <type name="GLib.IOChannel" c:type="GIOChannel*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <class name="OutputIconv"
           c:symbol-prefix="output_iconv"
           c:type="GsfOutputIconv"
           parent="Output"
           glib:type-name="GsfOutputIconv"
           glib:get-type="gsf_output_iconv_get_type"
           glib:type-struct="OutputIconvClass">
      <constructor name="new" c:identifier="gsf_output_iconv_new">
        <doc xml:whitespace="preserve">Adds a reference to @sink.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new GsfOutput object or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="sink" transfer-ownership="none">
            <doc xml:whitespace="preserve">The underlying data source.</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:whitespace="preserve">The target character set.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">The source character set.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="fallback" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">Either NULL or a UTF-8 string (representable in the target encoding)
to convert and output in place of characters that cannot be represented
in the target encoding.  NULL means use \u1234 or \U12345678 format.</doc>
        <type name="utf8"/>
      </property>
      <property name="input-charset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="output-charset"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="sink"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Output"/>
      </property>
    </class>
    <record name="OutputIconvClass"
            c:type="GsfOutputIconvClass"
            glib:is-gtype-struct-for="OutputIconv">
      <field name="output_class">
        <type name="OutputClass" c:type="GsfOutputClass"/>
      </field>
    </record>
    <class name="OutputMemory"
           c:symbol-prefix="output_memory"
           c:type="GsfOutputMemory"
           parent="Output"
           glib:type-name="GsfOutputMemory"
           glib:get-type="gsf_output_memory_get_type">
      <constructor name="new" c:identifier="gsf_output_memory_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
      </constructor>
      <method name="get_bytes" c:identifier="gsf_output_memory_get_bytes">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The data that has been written to @mem, or %null</doc>
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
      </method>
    </class>
    <class name="OutputStdio"
           c:symbol-prefix="output_stdio"
           c:type="GsfOutputStdio"
           parent="Output"
           glib:type-name="GsfOutputStdio"
           glib:get-type="gsf_output_stdio_get_type">
      <constructor name="new" c:identifier="gsf_output_stdio_new" throws="1">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file to create or replace.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_FILE" c:identifier="gsf_output_stdio_new_FILE">
        <doc xml:whitespace="preserve">Assumes ownership of @file.  If @keep_open is true, ownership reverts
to caller when the GsfObject is closed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new GsfOutput wrapper for @file.  Warning: the result will be seekable only if @file is seekable.  If it is seekable, the resulting GsfOutput object will seek relative to @file's beginning, not its current location at the time the GsfOutput object is created.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">The filename corresponding to @file.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">an existing stdio &lt;type&gt;FILE&lt;/type&gt; *</doc>
            <type name="gpointer" c:type="FILE*"/>
          </parameter>
          <parameter name="keep_open" transfer-ownership="none">
            <doc xml:whitespace="preserve">Should @file be closed when the wrapper is closed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="gsf_output_stdio_new_full"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new file or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of file to create or replace.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally %NULL.</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">%NULL terminated list of properties</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="gsf_output_stdio_new_valist"
                   introspectable="0">
        <return-value transfer-ownership="full">
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="first_property_name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <constant name="PARAM_STATIC" value="0" c:type="GSF_PARAM_STATIC">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="SharedMemory"
           c:symbol-prefix="shared_memory"
           c:type="GsfSharedMemory"
           parent="GObject.Object"
           glib:type-name="GsfSharedMemory"
           glib:get-type="gsf_shared_memory_get_type">
      <constructor name="mmapped_new"
                   c:identifier="gsf_shared_memory_mmapped_new">
        <return-value transfer-ownership="full">
          <type name="SharedMemory" c:type="GsfSharedMemory*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new" c:identifier="gsf_shared_memory_new">
        <return-value transfer-ownership="full">
          <type name="SharedMemory" c:type="GsfSharedMemory*"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <type name="gpointer" c:type="void*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsf_off_t" c:type="gsf_off_t"/>
          </parameter>
          <parameter name="needs_free" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="g_object">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="buf">
        <type name="gpointer" c:type="void*"/>
      </field>
      <field name="size">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="needs_free">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="needs_unmap">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <class name="StructuredBlob"
           c:symbol-prefix="structured_blob"
           c:type="GsfStructuredBlob"
           parent="Infile"
           glib:type-name="GsfStructuredBlob"
           glib:get-type="gsf_structured_blob_get_type">
      <function name="read" c:identifier="gsf_structured_blob_read">
        <doc xml:whitespace="preserve">Create a tree of binary blobs with unknown content from a #GsfInput or
#GsfInfile and store it in a newly created #GsfStructuredBlob.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GsfStructuredBlob object which the caller is responsible for.</doc>
          <type name="StructuredBlob" c:type="GsfStructuredBlob*"/>
        </return-value>
        <parameters>
          <parameter name="input" transfer-ownership="none">
            <doc xml:whitespace="preserve">An input (potentially a GsfInfile) holding the blob</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
        </parameters>
      </function>
      <method name="write" c:identifier="gsf_structured_blob_write">
        <doc xml:whitespace="preserve">Dumps structured blob @blob onto the @container.  Will fail if the output is
not an Outfile and blob has multiple streams.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutfile</doc>
            <type name="Outfile" c:type="GsfOutfile*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="Timestamp"
            c:type="GsfTimestamp"
            glib:type-name="GsfTimestamp"
            glib:get-type="gsf_timestamp_get_type"
            c:symbol-prefix="timestamp">
      <doc xml:whitespace="preserve">A point in time.</doc>
      <field name="date" writable="1">
        <type name="GLib.Date" c:type="GDate"/>
      </field>
      <field name="seconds" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="time_zone" writable="1">
        <type name="GLib.String" c:type="GString"/>
      </field>
      <field name="timet" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <constructor name="new" c:identifier="gsf_timestamp_new">
        <return-value transfer-ownership="full">
          <type name="Timestamp" c:type="GsfTimestamp*"/>
        </return-value>
      </constructor>
      <method name="as_string" c:identifier="gsf_timestamp_as_string">
        <doc xml:whitespace="preserve">Produce a string representation (ISO 8601 format) of @stamp.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a string representation of @stamp. When @stamp is %NULL, the representation is "&amp;lt;invalid&amp;gt;".</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="copy" c:identifier="gsf_timestamp_copy">
        <doc xml:whitespace="preserve">Copies a timestamp.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a separate copy of @stamp.</doc>
          <type name="Timestamp" c:type="GsfTimestamp*"/>
        </return-value>
      </method>
      <method name="equal" c:identifier="gsf_timestamp_equal">
        <doc xml:whitespace="preserve">Compare timestamps @a and @b.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">true if @a and @b represent the same point in time; false otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">another timestamp</doc>
            <type name="Timestamp" c:type="GsfTimestamp*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gsf_timestamp_free">
        <doc xml:whitespace="preserve">Releases the memory in use for @stamp (if any).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="hash" c:identifier="gsf_timestamp_hash">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="load_from_string"
              c:identifier="gsf_timestamp_load_from_string"
              version="1.14.24">
        <doc xml:whitespace="preserve">Very simple parser for time stamps.  Currently requires a format of
	'YYYY-MM-DDThh:mm:ss'
and does no bounds checking.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="spec" transfer-ownership="none">
            <doc xml:whitespace="preserve">The string to parse</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time" c:identifier="gsf_timestamp_set_time">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_value"
              c:identifier="gsf_timestamp_to_value"
              version="1.14.24">
        <doc xml:whitespace="preserve">Calls g_value_set_box (value, stamp);</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="XMLBlob" c:type="GsfXMLBlob" disguised="1">
    </record>
    <enumeration name="XMLContent" c:type="GsfXMLContent">
      <doc xml:whitespace="preserve">Controls the handling of character data within a parser node.</doc>
      <member name="no_content" value="0" c:identifier="GSF_XML_NO_CONTENT"/>
      <member name="content" value="1" c:identifier="GSF_XML_CONTENT"/>
      <member name="shared_content"
              value="2"
              c:identifier="GSF_XML_SHARED_CONTENT"/>
    </enumeration>
    <record name="XMLIn" c:type="GsfXMLIn">
      <field name="user_state" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="content" writable="1">
        <type name="GLib.String" c:type="GString*"/>
      </field>
      <field name="doc" writable="1">
        <type name="XMLInDoc" c:type="GsfXMLInDoc*"/>
      </field>
      <field name="node" writable="1">
        <type name="XMLInNode" c:type="GsfXMLInNode*"/>
      </field>
      <field name="node_stack" readable="0" private="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <method name="check_ns" c:identifier="gsf_xml_in_check_ns">
        <doc xml:whitespace="preserve">According to @state is @str in the namespace @ns_id ?</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a pointer to @str after the namespace if successful, otherwise %NULL.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">string to check</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="ns_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the namespace id</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_input" c:identifier="gsf_xml_in_get_input">
        <doc xml:whitespace="preserve">(New in 1.14.2)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">(but does not reference) the stream being parsed.</doc>
          <type name="Input" c:type="GsfInput*"/>
        </return-value>
      </method>
      <method name="namecmp" c:identifier="gsf_xml_in_namecmp">
        <doc xml:whitespace="preserve">Checks to see if @str is the same as @ns_id::@name with either an explicit
namespace or the current default namespace.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @str == @ns_id:@name according to @state.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">The potentially namespace qualified node name.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="ns_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name space id to check</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The target node name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_state" c:identifier="gsf_xml_in_push_state">
        <doc xml:whitespace="preserve">Take the first node from @doc as the current node and call its start handler.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfXMLInDoc</doc>
            <type name="XMLInDoc" c:type="GsfXMLInDoc*"/>
          </parameter>
          <parameter name="new_state" transfer-ownership="none">
            <doc xml:whitespace="preserve">arbitrary content for the parser</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="dtor" transfer-ownership="none" scope="call">
            <doc xml:whitespace="preserve">#GsfXMLInExtDtor</doc>
            <type name="XMLInExtDtor" c:type="GsfXMLInExtDtor"/>
          </parameter>
          <parameter name="attrs" transfer-ownership="none">
            <doc xml:whitespace="preserve">array of xmlChar const *</doc>
            <type name="libxml2.Char" c:type="xmlChar**"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="XMLInDoc"
            c:type="GsfXMLInDoc"
            glib:type-name="GsfXMLInDoc"
            glib:get-type="gsf_xml_in_doc_get_type"
            c:symbol-prefix="xml_in_doc">
      <constructor name="new" c:identifier="gsf_xml_in_doc_new">
        <doc xml:whitespace="preserve">Combine the nodes in the %NULL terminated array starting at @nodes with the
name spaces in the %NULL terminated array starting at @ns.  Prepare the
data structures necessary to validate a doument based on that description.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">%NULL on error</doc>
          <type name="XMLInDoc" c:type="GsfXMLInDoc*"/>
        </return-value>
        <parameters>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of node descriptors</doc>
            <type name="XMLInNode" c:type="GsfXMLInNode*"/>
          </parameter>
          <parameter name="ns" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of namespace identifiers</doc>
            <type name="XMLInNS" c:type="GsfXMLInNS*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_nodes" c:identifier="gsf_xml_in_doc_add_nodes">
        <doc xml:whitespace="preserve">Adds additional nodes to the structure of @doc</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:whitespace="preserve">%NULL terminated array of #GsfXMLInNode</doc>
            <type name="XMLInNode" c:type="GsfXMLInNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gsf_xml_in_doc_free">
        <doc xml:whitespace="preserve">Free up resources</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="parse" c:identifier="gsf_xml_in_doc_parse">
        <doc xml:whitespace="preserve">Read an xml document from @input and parse based on the the descriptor in
@doc</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="input" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfInput</doc>
            <type name="Input" c:type="GsfInput*"/>
          </parameter>
          <parameter name="user_state" transfer-ownership="none">
            <doc xml:whitespace="preserve">arbitrary content stored in the parser</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unknown_handler"
              c:identifier="gsf_xml_in_doc_set_unknown_handler">
        <doc xml:whitespace="preserve">Call the function @handler when an unexpected child node is found</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handler" transfer-ownership="none" scope="call">
            <doc xml:whitespace="preserve">The function to call</doc>
            <type name="XMLInUnknownFunc" c:type="GsfXMLInUnknownFunc"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="XMLInExtDtor" c:type="GsfXMLInExtDtor">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xin" transfer-ownership="none">
          <type name="XMLIn" c:type="GsfXMLIn*"/>
        </parameter>
        <parameter name="old_state" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="XMLInNS"
            c:type="GsfXMLInNS"
            glib:type-name="GsfXMLInNS"
            glib:get-type="gsf_xml_in_ns_get_type"
            c:symbol-prefix="xml_in_ns">
      <field name="uri" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="ns_id" writable="1">
        <type name="guint" c:type="unsigned"/>
      </field>
    </record>
    <record name="XMLInNode" c:type="GsfXMLInNode">
      <field name="id" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="ns_id" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="parent_id" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="start">
        <callback name="start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xin" transfer-ownership="none">
              <type name="XMLIn" c:type="GsfXMLIn*"/>
            </parameter>
            <parameter name="attrs" transfer-ownership="none">
              <type name="libxml2.Char" c:type="xmlChar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end">
        <callback name="end">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="xin" transfer-ownership="none">
              <type name="XMLIn" c:type="GsfXMLIn*"/>
            </parameter>
            <parameter name="unknown" transfer-ownership="none">
              <type name="XMLBlob" c:type="GsfXMLBlob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <union name="user_data" c:type="user_data">
        <field name="v_int" writable="1">
          <type name="gint" c:type="int"/>
        </field>
        <field name="v_bool" writable="1">
          <type name="gboolean" c:type="gboolean"/>
        </field>
        <field name="v_blob" writable="1">
          <type name="gpointer" c:type="gpointer"/>
        </field>
        <field name="v_str" writable="1">
          <type name="utf8" c:type="char*"/>
        </field>
      </union>
      <field name="has_content" writable="1">
        <type name="XMLContent" c:type="GsfXMLContent"/>
      </field>
      <field name="check_children_for_ns" writable="1" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
      <field name="share_children_with_parent" writable="1" bits="1">
        <type name="guint" c:type="unsigned"/>
      </field>
    </record>
    <callback name="XMLInUnknownFunc" c:type="GsfXMLInUnknownFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="xin" transfer-ownership="none">
          <type name="XMLIn" c:type="GsfXMLIn*"/>
        </parameter>
        <parameter name="elem" transfer-ownership="none">
          <type name="libxml2.Char" c:type="xmlChar*"/>
        </parameter>
        <parameter name="attrs" transfer-ownership="none">
          <type name="libxml2.Char" c:type="xmlChar**"/>
        </parameter>
      </parameters>
    </callback>
    <class name="XMLOut"
           c:symbol-prefix="xml_out"
           c:type="GsfXMLOut"
           parent="GObject.Object"
           glib:type-name="GsfXMLOut"
           glib:get-type="gsf_xml_out_get_type"
           glib:type-struct="XMLOutClass">
      <constructor name="new" c:identifier="gsf_xml_out_new">
        <doc xml:whitespace="preserve">Create an XML output stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GsfXMLOut</doc>
          <type name="XMLOut" c:type="GsfXMLOut*"/>
        </return-value>
        <parameters>
          <parameter name="output" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GsfOutput</doc>
            <type name="Output" c:type="GsfOutput*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_base64" c:identifier="gsf_xml_out_add_base64">
        <doc xml:whitespace="preserve">dump @len bytes in @data into the content of node @id using base64</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">Data to be written</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:whitespace="preserve">Length of data</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_bool" c:identifier="gsf_xml_out_add_bool">
        <doc xml:whitespace="preserve">dump boolean value @val to an attribute named @id or as the nodes content
Use '1' or '0' to simplify import</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_color" c:identifier="gsf_xml_out_add_color">
        <doc xml:whitespace="preserve">dump Color @r.@g.@b to an attribute named @id or as the nodes content</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="r" transfer-ownership="none">
            <doc xml:whitespace="preserve">Red value</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="g" transfer-ownership="none">
            <doc xml:whitespace="preserve">Green value</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:whitespace="preserve">Blue value</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_cstr" c:identifier="gsf_xml_out_add_cstr">
        <doc xml:whitespace="preserve">dump @val_utf8 to an attribute named @id or as the nodes content escaping
characters as necessary.  If @val_utf8 is NULL do nothing (no warning, no
output)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val_utf8" transfer-ownership="none">
            <doc xml:whitespace="preserve">a utf8 encoded string</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_cstr_unchecked"
              c:identifier="gsf_xml_out_add_cstr_unchecked">
        <doc xml:whitespace="preserve">dump @val_utf8 to an attribute named @id without checking to see if the
content needs escaping.  A useful performance enhancement when the
application knows that structure of the content well.  If @val_utf8 is NULL
do nothing (no warning, no output)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val_utf8" transfer-ownership="none">
            <doc xml:whitespace="preserve">a utf8 encoded string to export</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_enum" c:identifier="gsf_xml_out_add_enum">
        <doc xml:whitespace="preserve">Output the name of value @val of enumeration type @etype.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="etype" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">enum element number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_float" c:identifier="gsf_xml_out_add_float">
        <doc xml:whitespace="preserve">dump float value @val to an attribute named @id or as the nodes
content with precision @precision.  The number will be formattted
according to the "C" locale.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of significant digits to use, -1 meaning "enough".</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_gvalue" c:identifier="gsf_xml_out_add_gvalue">
        <doc xml:whitespace="preserve">Output the value of @val as a string.  Does NOT store any type information
with the string, just thevalue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GValue</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int" c:identifier="gsf_xml_out_add_int">
        <doc xml:whitespace="preserve">dump integer value @val to an attribute named @id or as the nodes content</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_uint" c:identifier="gsf_xml_out_add_uint">
        <doc xml:whitespace="preserve">dump unsigned integer value @val to an attribute named @id or as the nodes
content</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">optionally NULL for content</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">the value</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_element" c:identifier="gsf_xml_out_end_element">
        <doc xml:whitespace="preserve">Closes/ends an XML element.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the element that has been closed.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_output" c:identifier="gsf_xml_out_get_output">
        <doc xml:whitespace="preserve">Get the #GsfInput we are parsing from.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput or %NULL.</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </return-value>
      </method>
      <method name="set_doc_type" c:identifier="gsf_xml_out_set_doc_type">
        <doc xml:whitespace="preserve">Store some optional some &amp;lt;!DOCTYPE .. &amp;gt; content</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the document type declaration</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="simple_element" c:identifier="gsf_xml_out_simple_element">
        <doc xml:whitespace="preserve">Convenience routine to output a simple @id element with content @content.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:whitespace="preserve">Content of the element</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="simple_float_element"
              c:identifier="gsf_xml_out_simple_float_element">
        <doc xml:whitespace="preserve">Convenience routine to output an element @id with float value @val using
@precision significant digits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element value</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="precision" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of significant digits to use, -1 meaning "enough".</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="simple_int_element"
              c:identifier="gsf_xml_out_simple_int_element">
        <doc xml:whitespace="preserve">Convenience routine to output an element @id with integer value @val.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element value</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_element" c:identifier="gsf_xml_out_start_element">
        <doc xml:whitespace="preserve">Output a start element @id, if necessary preceeded by an XML declaration.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">Element name</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="pretty-print" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="sink"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Output"/>
      </property>
      <field name="base">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="output">
        <type name="Output" c:type="GsfOutput*"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="_GsfXMLOutPrivate*"/>
      </field>
    </class>
    <record name="XMLOutClass"
            c:type="GsfXMLOutClass"
            glib:is-gtype-struct-for="XMLOut">
      <field name="base">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gsf_reserved1" introspectable="0">
        <callback name="_gsf_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved2" introspectable="0">
        <callback name="_gsf_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved3" introspectable="0">
        <callback name="_gsf_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gsf_reserved4" introspectable="0">
        <callback name="_gsf_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="XMLProbeFunc" c:type="GsfXMLProbeFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <type name="libxml2.Char" c:type="const xmlChar*"/>
        </parameter>
        <parameter name="prefix" transfer-ownership="none">
          <type name="libxml2.Char" c:type="const xmlChar*"/>
        </parameter>
        <parameter name="URI" transfer-ownership="none">
          <type name="libxml2.Char" c:type="const xmlChar*"/>
        </parameter>
        <parameter name="nb_namespaces" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="namespaces" transfer-ownership="none">
          <type name="libxml2.Char" c:type="const xmlChar**"/>
        </parameter>
        <parameter name="nb_attributes" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="nb_defaulted" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <type name="libxml2.Char" c:type="const xmlChar**"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="ZIP_BLOCK_SIZE" value="32768" c:type="ZIP_BLOCK_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_BUF_SIZE" value="512" c:type="ZIP_BUF_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_COMMENT_SIZE"
              value="32"
              c:type="ZIP_DIRENT_COMMENT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_COMPR_METHOD"
              value="10"
              c:type="ZIP_DIRENT_COMPR_METHOD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_CRC32" value="16" c:type="ZIP_DIRENT_CRC32">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_CSIZE" value="20" c:type="ZIP_DIRENT_CSIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_DISKSTART"
              value="34"
              c:type="ZIP_DIRENT_DISKSTART">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_DOSTIME" value="12" c:type="ZIP_DIRENT_DOSTIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_ENCODER" value="4" c:type="ZIP_DIRENT_ENCODER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_EXTRACT" value="6" c:type="ZIP_DIRENT_EXTRACT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_EXTRAS_SIZE"
              value="30"
              c:type="ZIP_DIRENT_EXTRAS_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_FILE_MODE"
              value="38"
              c:type="ZIP_DIRENT_FILE_MODE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_FILE_TYPE"
              value="36"
              c:type="ZIP_DIRENT_FILE_TYPE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_FLAGS" value="8" c:type="ZIP_DIRENT_FLAGS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_NAME_SIZE"
              value="28"
              c:type="ZIP_DIRENT_NAME_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_OFFSET" value="42" c:type="ZIP_DIRENT_OFFSET">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_SIZE" value="46" c:type="ZIP_DIRENT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_DIRENT_USIZE" value="24" c:type="ZIP_DIRENT_USIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_COMPR_METHOD"
              value="8"
              c:type="ZIP_FILE_HEADER_COMPR_METHOD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_CRC32"
              value="14"
              c:type="ZIP_FILE_HEADER_CRC32">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_CSIZE"
              value="18"
              c:type="ZIP_FILE_HEADER_CSIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_DOSTIME"
              value="10"
              c:type="ZIP_FILE_HEADER_DOSTIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_EXTRACT"
              value="4"
              c:type="ZIP_FILE_HEADER_EXTRACT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_EXTRAS_SIZE"
              value="28"
              c:type="ZIP_FILE_HEADER_EXTRAS_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_FLAGS"
              value="6"
              c:type="ZIP_FILE_HEADER_FLAGS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_NAME_SIZE"
              value="26"
              c:type="ZIP_FILE_HEADER_NAME_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_SIZE"
              value="30"
              c:type="ZIP_FILE_HEADER_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_FILE_HEADER_USIZE"
              value="22"
              c:type="ZIP_FILE_HEADER_USIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_COMP_METHOD"
              value="8"
              c:type="ZIP_HEADER_COMP_METHOD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_COMP_SIZE"
              value="18"
              c:type="ZIP_HEADER_COMP_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_CRC" value="14" c:type="ZIP_HEADER_CRC">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_EXTRA_LEN"
              value="28"
              c:type="ZIP_HEADER_EXTRA_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_FLAGS" value="6" c:type="ZIP_HEADER_FLAGS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_NAME_LEN"
              value="26"
              c:type="ZIP_HEADER_NAME_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_OS" value="5" c:type="ZIP_HEADER_OS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_SIZE" value="30" c:type="ZIP_HEADER_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_TIME" value="10" c:type="ZIP_HEADER_TIME">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_UNCOMP_SIZE"
              value="22"
              c:type="ZIP_HEADER_UNCOMP_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_HEADER_VERSION" value="4" c:type="ZIP_HEADER_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_NAME_SEPARATOR" value="47" c:type="ZIP_NAME_SEPARATOR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_COMMENT_SIZE"
              value="20"
              c:type="ZIP_TRAILER_COMMENT_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_DIR_DISK"
              value="6"
              c:type="ZIP_TRAILER_DIR_DISK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_DIR_POS"
              value="16"
              c:type="ZIP_TRAILER_DIR_POS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_DIR_SIZE"
              value="12"
              c:type="ZIP_TRAILER_DIR_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_DISK" value="4" c:type="ZIP_TRAILER_DISK">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_ENTRIES"
              value="8"
              c:type="ZIP_TRAILER_ENTRIES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_SIZE" value="22" c:type="ZIP_TRAILER_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="ZIP_TRAILER_TOTAL_ENTRIES"
              value="10"
              c:type="ZIP_TRAILER_TOTAL_ENTRIES">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="ZipCompressionMethod" c:type="GsfZipCompressionMethod">
      <member name="stored" value="0" c:identifier="GSF_ZIP_STORED"/>
      <member name="shrunk" value="1" c:identifier="GSF_ZIP_SHRUNK"/>
      <member name="reducedx1" value="2" c:identifier="GSF_ZIP_REDUCEDx1"/>
      <member name="reducedx2" value="3" c:identifier="GSF_ZIP_REDUCEDx2"/>
      <member name="reducedx3" value="4" c:identifier="GSF_ZIP_REDUCEDx3"/>
      <member name="reducedx4" value="5" c:identifier="GSF_ZIP_REDUCEDx4"/>
      <member name="imploded" value="6" c:identifier="GSF_ZIP_IMPLODED"/>
      <member name="tokenized" value="7" c:identifier="GSF_ZIP_TOKENIZED"/>
      <member name="deflated" value="8" c:identifier="GSF_ZIP_DEFLATED"/>
      <member name="deflated_better"
              value="9"
              c:identifier="GSF_ZIP_DEFLATED_BETTER"/>
      <member name="imploded_better"
              value="10"
              c:identifier="GSF_ZIP_IMPLODED_BETTER"/>
    </enumeration>
    <record name="ZipDirent"
            c:type="GsfZipDirent"
            glib:type-name="GsfZipDirent"
            glib:get-type="gsf_zip_dirent_get_type"
            c:symbol-prefix="zip_dirent">
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="compr_method" writable="1">
        <type name="ZipCompressionMethod" c:type="GsfZipCompressionMethod"/>
      </field>
      <field name="crc32" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="csize" writable="1">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="usize" writable="1">
        <type name="gulong" c:type="size_t"/>
      </field>
      <field name="offset" writable="1">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="data_offset" writable="1">
        <type name="gsf_off_t" c:type="gsf_off_t"/>
      </field>
      <field name="dostime" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <constructor name="new" c:identifier="gsf_zip_dirent_new">
        <return-value transfer-ownership="full">
          <type name="ZipDirent" c:type="GsfZipDirent*"/>
        </return-value>
      </constructor>
      <method name="free" c:identifier="gsf_zip_dirent_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <record name="ZipVDir"
            c:type="GsfZipVDir"
            glib:type-name="GsfZipVDir"
            glib:get-type="gsf_zip_vdir_get_type"
            c:symbol-prefix="zip_vdir">
      <field name="name" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="is_directory" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dirent" writable="1">
        <type name="ZipDirent" c:type="GsfZipDirent*"/>
      </field>
      <field name="children" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="last_child" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <constructor name="new"
                   c:identifier="gsf_zip_vdir_new"
                   version="1.14.24">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly created #GsfZipVDir.</doc>
          <type name="ZipVDir" c:type="GsfZipVDir*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="is_directory" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="dirent" transfer-ownership="none">
            <type name="ZipDirent" c:type="GsfZipDirent*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_child" c:identifier="gsf_zip_vdir_add_child">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="child" transfer-ownership="none">
            <type name="ZipVDir" c:type="GsfZipVDir*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gsf_zip_vdir_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="free_dirent" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function name="base64_decode_simple"
              c:identifier="gsf_base64_decode_simple">
      <doc xml:whitespace="preserve">Decodes a chunk of base64 encoded data from @data back into @data.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of bytes converted</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:whitespace="preserve">max length of data to decode</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="base64_decode_step" c:identifier="gsf_base64_decode_step">
      <doc xml:whitespace="preserve">Decodes a chunk of base64 encoded data</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of bytes converted</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:whitespace="preserve">input stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:whitespace="preserve">max length of data to decode</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:whitespace="preserve">output stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="save" transfer-ownership="none">
          <doc xml:whitespace="preserve">leftover bits that have not yet been decoded</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base64_encode_close"
              c:identifier="gsf_base64_encode_close">
      <doc xml:whitespace="preserve">This funcion should be called to when finished encoding everything, to
flush off the last little bit.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a count of the number of bytes in the final block.</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:whitespace="preserve">Data to be encoded</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="inlen" transfer-ownership="none">
          <doc xml:whitespace="preserve">Length of data to be encoded</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="break_lines" transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether to use line breaks</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:whitespace="preserve">Encoded data.</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="save" transfer-ownership="none">
          <doc xml:whitespace="preserve">leftover bits that have not yet been decoded</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="base64_encode_simple"
              c:identifier="gsf_base64_encode_simple">
      <doc xml:whitespace="preserve">Encodes data from @data back into @data using base64 encoding.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of bytes encoded</doc>
        <type name="guint8" c:type="guint8*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">data stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:whitespace="preserve">max length of data to encode</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="base64_encode_step" c:identifier="gsf_base64_encode_step">
      <doc xml:whitespace="preserve">Performs an 'encode step', only encodes blocks of 3 characters from @in into
the output @out at a time, saves left-over state in @state and @save
(initialise to 0 on first invocation).</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the number of bytes encoded</doc>
        <type name="gulong" c:type="size_t"/>
      </return-value>
      <parameters>
        <parameter name="in" transfer-ownership="none">
          <doc xml:whitespace="preserve">input stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:whitespace="preserve">max length of data to decode</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
        <parameter name="break_lines" transfer-ownership="none">
          <doc xml:whitespace="preserve">Whether to use line breaks</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:whitespace="preserve">output stream</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">holds the number of bits that are stored in @save</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="save" transfer-ownership="none">
          <doc xml:whitespace="preserve">leftover bits that have not yet been decoded</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_flag" c:identifier="gsf_debug_flag">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="flag" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="doc_meta_dump" c:identifier="gsf_doc_meta_dump">
      <doc xml:whitespace="preserve">A debugging utility to dump the content of @meta via g_print</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="meta" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfDocMetaData</doc>
          <type name="DocMetaData" c:type="GsfDocMetaData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark" c:identifier="gsf_error_quark">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GQuark used to identify libgsf errors in #GError structures. Specific error codes come from the #GsfError enumeration.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="extension_pointer" c:identifier="gsf_extension_pointer">
      <doc xml:whitespace="preserve">Extracts the extension from the end of a filename (the part after the final
'.' in the filename).</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A pointer to the extension part of the filename, or a pointer to the end of the string if the filename does not have an extension.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:whitespace="preserve">A filename or file path.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_to_utf8" c:identifier="gsf_filename_to_utf8">
      <doc xml:whitespace="preserve">A utility wrapper to make sure filenames are valid utf8.
Caller must g_free the result.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">@filename using utf-8 encoding for display</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:whitespace="preserve">file name suitable for open(2).</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="quoted" transfer-ownership="none">
          <doc xml:whitespace="preserve">if %TRUE, the resulting utf8 file name will be quoted (unless it is invalid).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="iconv_close" c:identifier="gsf_iconv_close">
      <doc xml:whitespace="preserve">A utility wrapper to safely close an iconv handle.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:whitespace="preserve">handle to be closed.</doc>
          <type name="GLib.IConv" c:type="GIConv"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="gsf_init">
      <doc xml:whitespace="preserve">Initializes the GSF library</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="init_dynamic" c:identifier="gsf_init_dynamic">
      <doc xml:whitespace="preserve">Initializes the GSF library and associates it with a type module @mod.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GTypeModule.</doc>
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </parameter>
      </parameters>
    </function>
    <function name="le_get_double" c:identifier="gsf_le_get_double">
      <doc xml:whitespace="preserve">Interpret binary data as a double in little endian order.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">interpreted data</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to storage</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="le_get_float" c:identifier="gsf_le_get_float">
      <doc xml:whitespace="preserve">Interpret binary data as a float in little endian order.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">interpreted data</doc>
        <type name="gfloat" c:type="float"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to storage</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="le_get_guint64" c:identifier="gsf_le_get_guint64">
      <doc xml:whitespace="preserve">Interpret binary data as a guint64 (8 byte unsigned integer type) in little
endian order.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">interpreted data</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to storage</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
      </parameters>
    </function>
    <function name="le_set_double" c:identifier="gsf_le_set_double">
      <doc xml:whitespace="preserve">Store a value of type double in memory in little endian order</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to storage</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="d" transfer-ownership="none">
          <doc xml:whitespace="preserve">double to be stored</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="le_set_float" c:identifier="gsf_le_set_float">
      <doc xml:whitespace="preserve">Store a value of type float in memory in little endian order.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to storage</doc>
          <type name="gpointer" c:type="void*"/>
        </parameter>
        <parameter name="f" transfer-ownership="none">
          <doc xml:whitespace="preserve">float to be stored</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <function name="mem_dump" c:identifier="gsf_mem_dump">
      <doc xml:whitespace="preserve">Dump @len bytes from the memory location given by @ptr.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr" transfer-ownership="none">
          <doc xml:whitespace="preserve">memory area to be dumped.</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:whitespace="preserve">how many bytes will be dumped.</doc>
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_codepage_to_lid"
              c:identifier="gsf_msole_codepage_to_lid">
      <return-value transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="codepage" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_iconv_open_codepage_for_export"
              c:identifier="gsf_msole_iconv_open_codepage_for_export"
              introspectable="0">
      <doc xml:whitespace="preserve">NOTE: skipped since GIConv is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">an iconv converter to go from utf8 -&gt; to our best guess at a useful windows codepage.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
      <parameters>
        <parameter name="codepage_to" transfer-ownership="none">
          <doc xml:whitespace="preserve">the target code page.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_iconv_open_codepage_for_import"
              c:identifier="gsf_msole_iconv_open_codepage_for_import"
              introspectable="0">
      <doc xml:whitespace="preserve">NOTE: skipped since GIConv is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">an iconv converter for @codepage -&gt; utf8.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
      <parameters>
        <parameter name="to" transfer-ownership="none">
          <doc xml:whitespace="preserve">the target encoding.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="codepage" transfer-ownership="none">
          <doc xml:whitespace="preserve">the source code page.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_iconv_open_codepages_for_export"
              c:identifier="gsf_msole_iconv_open_codepages_for_export"
              introspectable="0">
      <doc xml:whitespace="preserve">NOTE: skipped since GIConv is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">an iconv converter to go from utf8 -&gt; to our best guess at a useful windows codepage.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
      <parameters>
        <parameter name="codepage_to" transfer-ownership="none">
          <doc xml:whitespace="preserve">the target code page.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="from" transfer-ownership="none">
          <doc xml:whitespace="preserve">the source encoding.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_iconv_open_for_export"
              c:identifier="gsf_msole_iconv_open_for_export"
              introspectable="0">
      <doc xml:whitespace="preserve">NOTE: skipped since GIConv is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">an iconv convert to go from utf8 -&gt; to our best guess at a useful windows codepage.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
    </function>
    <function name="msole_iconv_open_for_import"
              c:identifier="gsf_msole_iconv_open_for_import"
              introspectable="0">
      <doc xml:whitespace="preserve">NOTE: skipped since GIConv is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">an iconv converter for single byte encodings @codepage -&gt; utf8. Attempt to handle the semantics of a specification for multibyte encodings since this is only supposed to be used for single bytes.</doc>
        <type name="GLib.IConv" c:type="GIConv"/>
      </return-value>
      <parameters>
        <parameter name="codepage" transfer-ownership="none">
          <doc xml:whitespace="preserve">the source code page.</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_iconv_win_codepage"
              c:identifier="gsf_msole_iconv_win_codepage">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">our best guess at the applicable windows code page based on an environment variable or the current locale.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="msole_inflate" c:identifier="gsf_msole_inflate">
      <doc xml:whitespace="preserve">Decompresses an LZ compressed stream.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A GByteArray that the caller is responsible for freeing</doc>
        <array name="GLib.ByteArray" c:type="GByteArray*">
          <type name="guint8" c:type="guint8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="input" transfer-ownership="none">
          <doc xml:whitespace="preserve">stream to read from</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:whitespace="preserve">offset into it for start byte of compresse stream</doc>
          <type name="gsf_off_t" c:type="gsf_off_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_language_for_lid"
              c:identifier="gsf_msole_language_for_lid">
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the xx_YY style string (can be just xx or xxx) for the given LID. Return value must not be freed. If the LID is not found, is set to 0x0400, or is set to 0x0000, will return "-none-"</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="lid" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_lid_for_language"
              c:identifier="gsf_msole_lid_for_language">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the LID (Language Identifier) for the input language. If lang is %null, return 0x0400 ("-none-"), and not 0x0000 ("no proofing")</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="lang" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_lid_to_codepage"
              c:identifier="gsf_msole_lid_to_codepage">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">our best guess at the codepage for the given language id</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="lid" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="msole_lid_to_codepage_str"
              c:identifier="gsf_msole_lid_to_codepage_str">
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the Iconv codepage string for the given LID. Return value must be g_free ()'d</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="lid" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="odf_get_ns"
              c:identifier="gsf_odf_get_ns"
              version="1.14.24">
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the used ODF namespace</doc>
        <type name="XMLInNS" c:type="GsfXMLInNS*"/>
      </return-value>
    </function>
    <function name="odf_get_version"
              c:identifier="gsf_odf_get_version"
              version="1.14.24">
      <doc xml:whitespace="preserve">Gives the ODF version used by libgsf when writing Open Document files.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the ODF version: 102.</doc>
        <type name="gshort" c:type="short"/>
      </return-value>
    </function>
    <function name="odf_get_version_string"
              c:identifier="gsf_odf_get_version_string"
              version="1.14.24">
      <doc xml:whitespace="preserve">Gives the ODF version used by libgsf when writing Open Document files.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">the ODF version as a string: "1.2".</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <function name="open_pkg_error_id" c:identifier="gsf_open_pkg_error_id">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="open_pkg_foreach_rel"
              c:identifier="gsf_open_pkg_foreach_rel">
      <doc xml:whitespace="preserve">New in 1.14.9

Walks each relationship associated with @opkg and calls @func with @user_data.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:whitespace="preserve">#GsfOpenPkgIter</doc>
          <type name="OpenPkgIter" c:type="GsfOpenPkgIter"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">gpointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_lookup_rel_by_id"
              c:identifier="gsf_open_pkg_lookup_rel_by_id"
              introspectable="0">
      <doc xml:whitespace="preserve">New in 1.14.6

Finds @opkg's relation with @id

NOTE: skipping because gsf_open_pkg_rel_get_type() does not return a GType.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A #GsfOpenPkgRel or %NULL</doc>
        <type name="OpenPkgRel" c:type="GsfOpenPkgRel*"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:whitespace="preserve">identifier.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_lookup_rel_by_type"
              c:identifier="gsf_open_pkg_lookup_rel_by_type"
              introspectable="0">
      <doc xml:whitespace="preserve">New in 1.14.6

Finds _a_ relation of @opkg with @type (no order is guaranteed)

NOTE: skipping because gsf_open_pkg_rel_get_type() does not return a GType.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A #GsfOpenPkgRel or %NULL</doc>
        <type name="OpenPkgRel" c:type="GsfOpenPkgRel*"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:whitespace="preserve">target</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_open_rel"
              c:identifier="gsf_open_pkg_open_rel"
              throws="1">
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a new #GsfInput which the called needs to unref, or %NULL and sets @err</doc>
        <type name="Input" c:type="GsfInput*"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="rel" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfOpenPkgRel</doc>
          <type name="OpenPkgRel" c:type="GsfOpenPkgRel*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_open_rel_by_id"
              c:identifier="gsf_open_pkg_open_rel_by_id"
              throws="1">
      <doc xml:whitespace="preserve">New in 1.14.7

Open @opkg's relation @id</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A new GsfInput or %NULL, and sets @err if possible.</doc>
        <type name="Input" c:type="GsfInput*"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:whitespace="preserve">target id</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_open_rel_by_type"
              c:identifier="gsf_open_pkg_open_rel_by_type"
              throws="1">
      <doc xml:whitespace="preserve">New in 1.14.9

Open one of @opkg's relationships with type=@type.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">A new GsfInput or %NULL, and sets @err if possible.</doc>
        <type name="Input" c:type="GsfInput*"/>
      </return-value>
      <parameters>
        <parameter name="opkg" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:whitespace="preserve">target type</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="open_pkg_parse_rel_by_id"
              c:identifier="gsf_open_pkg_parse_rel_by_id">
      <doc xml:whitespace="preserve">Convenience function to parse a related part.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">NULL on success or a GError which callerss need to free on failure.</doc>
        <type name="GLib.Error" c:type="GError*"/>
      </return-value>
      <parameters>
        <parameter name="xin" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfXMLIn</doc>
          <type name="XMLIn" c:type="GsfXMLIn*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:whitespace="preserve">target id</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="dtd" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfXMLInNode</doc>
          <type name="XMLInNode" c:type="GsfXMLInNode*"/>
        </parameter>
        <parameter name="ns" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfXMLInNS</doc>
          <type name="XMLInNS" c:type="GsfXMLInNS*"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_settings_collect"
              c:identifier="gsf_property_settings_collect"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="p_params" transfer-ownership="none">
          <type name="GObject.Parameter" c:type="GParameter**"/>
        </parameter>
        <parameter name="p_n_params" transfer-ownership="none">
          <type name="gulong" c:type="size_t*"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="property_settings_collect_valist"
              c:identifier="gsf_property_settings_collect_valist"
              introspectable="0">
      <doc xml:whitespace="preserve">This function builds a GParameter array suitable for g_object_newv.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_type" transfer-ownership="none">
          <doc xml:whitespace="preserve">the GType for which the properties are being set.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="p_params" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the GParameter array that holds the properties. (Used for both input and output.  This may point to a %NULL pointer if there are no properties collected yet.)</doc>
          <type name="GObject.Parameter" c:type="GParameter**"/>
        </parameter>
        <parameter name="p_n_params" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to the number of properties collected.  (Used for both input and output.)</doc>
          <type name="gulong" c:type="size_t*"/>
        </parameter>
        <parameter name="first_property_name" transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the first property being set, or NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="var_args" transfer-ownership="none">
          <doc xml:whitespace="preserve">a va_list holding the remainder of the property names and values, terminated by a %NULL.</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="property_settings_free"
              c:identifier="gsf_property_settings_free">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <type name="GObject.Parameter" c:type="GParameter*"/>
        </parameter>
        <parameter name="n_params" transfer-ownership="none">
          <type name="gulong" c:type="size_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="shutdown" c:identifier="gsf_shutdown">
      <doc xml:whitespace="preserve">De-intializes the GSF library from a type module.
Currently does nothing.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="shutdown_dynamic" c:identifier="gsf_shutdown_dynamic">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="module" transfer-ownership="none">
          <type name="GObject.TypeModule" c:type="GTypeModule*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_docprop_varray"
              c:identifier="gsf_value_get_docprop_varray">
      <return-value transfer-ownership="full">
        <type name="GObject.ValueArray" c:type="GValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_docprop_vector"
              c:identifier="gsf_value_get_docprop_vector">
      <doc xml:whitespace="preserve">This function returns a pointer to the GsfDocPropVector structure in @value.
No additional references are created.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A pointer to the #GsfDocPropVector structure in @value</doc>
        <type name="DocPropVector" c:type="GsfDocPropVector*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:whitespace="preserve">A GValue of type #GsfDocPropVector.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlDocFormatDump" c:identifier="gsf_xmlDocFormatDump">
      <doc xml:whitespace="preserve">Dumps the document @cur into @output.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">status from xmlSaveFormatFileTo.</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="output" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfOutput</doc>
          <type name="Output" c:type="GsfOutput*"/>
        </parameter>
        <parameter name="cur" transfer-ownership="none">
          <doc xml:whitespace="preserve">#xmlDocPtr</doc>
          <type name="libxml2.Doc" c:type="xmlDoc*"/>
        </parameter>
        <parameter name="encoding" transfer-ownership="none">
          <doc xml:whitespace="preserve">The encoding to use.</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to reformat the output.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_gvalue_from_str"
              c:identifier="gsf_xml_gvalue_from_str">
      <doc xml:whitespace="preserve">Try to parse @str as a value of type @t into @res.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">True when parsing of @str as a value of type @t was succesfull; false otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="res" transfer-ownership="none">
          <doc xml:whitespace="preserve">Result value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="t" transfer-ownership="none">
          <doc xml:whitespace="preserve">Type of data</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:whitespace="preserve">Value string</doc>
          <type name="utf8" c:type="char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parser_context"
              c:identifier="gsf_xml_parser_context"
              introspectable="0">
      <doc xml:whitespace="preserve">Create a libxml2 pull style parser context wrapper around gsf input @input.
This signature will probably change to supply a SAX structure.

&lt;note&gt;This adds a reference to @input.&lt;/note&gt;
&lt;note&gt;A simple wrapper around a cleaner implementation that will fold in
when we add other api changes.  Its not worth bumping just for this.&lt;/note&gt;

NOTE: skipped since xmlParserCtxt is not exported to introspection.</doc>
      <return-value>
        <doc xml:whitespace="preserve">A parser context or %NULL</doc>
        <type c:type="xmlParserCtxt*"/>
      </return-value>
      <parameters>
        <parameter name="input" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_probe" c:identifier="gsf_xml_probe">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="input" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GsfInput</doc>
          <type name="Input" c:type="GsfInput*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" scope="call">
          <doc xml:whitespace="preserve">#GsfXMLProbeFunc</doc>
          <type name="XMLProbeFunc" c:type="GsfXMLProbeFunc"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
